%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: sampling.randkcnf.uniform.time.pdf
%%Creator: (Adobe Acrobat 22.2.0)
%%For: jiangnanhugo
%%CreationDate: 11/21/22, 12:57 AM
%%BoundingBox: 0 0 236 223
%%HiResBoundingBox: 0 0 235.7234 222.5136
%%CropBox: 0 0 235.7234 222.5136
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 575 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.cb7c5a1, 2022/04/14-05:22:35        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2022-07-29T21:29:02-04:00"
   xmp:CreatorTool="Matplotlib v3.5.0, https://matplotlib.org"
   pdf:Producer="Matplotlib pdf backend v3.5.0"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -222.514 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 222.514 li
235.723 222.514 li
235.723 0 li
cp
clp
0 222.514 mo
235.723 222.514 li
235.723 0 li
0 0 li
0 222.514 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
38.8953 190.26 mo
234.195 190.26 li
234.195 0 li
38.8953 0 li
38.8953 190.26 li
f
47.7726 190.26 mo
47.7726 193.76 li
1 /0 /CSD get_res sepcs
.85 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.7726 190.26 mo
47.7726 193.76 li
@
%ADOBeginSubsetFont: XAAAAA+CMR12 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /XAAAAA+CMR12 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR12.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdef/UniqueID 5000794 def/FontBBox {-34 -251 988 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 446 665 675 683 704] def/OtherBlues [-205 -194] def/BlueScale 0.04379 def/StdHW [29] def/StdVW [65] def/StemSnapH [20 29] def/StemSnapV [65 81] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/zero <1C60D8A8C9B752ABCA93999A026DBF99AAD8904D1DDB4E57C113FC7C4BB860A57D51CF4E3751ED57B3101A17AA1B5671A1C015D5C75D8FEB922BD177420EAB3C957481DA4E4963ACF84BF9FC50697C050F334164800BFDE7711618591B1F831B7E866F65D098B3FE084D7C62B127F713D632621D7D805D4B9DC728D9DE8EB464A7CFE042C184593D33015AE1308E4B413209F42702D5> |-/one <1C60D8A8C9B752AB372B1338726DAE50702AE3FC3505C230AA8B538E88A64BC50555C15C4F9C1C8D25ACFD4CFF046EBC17B6B6CE5B6DDF472F018C84C2D8CA302ED5402A29C0899E66EA3A4575040CA2E8AB00A92CB377A30E0A8E01C55A1866557B8C8E354DD627142F4AFBA8F01617> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SRIVAI+CMR12 /XAAAAA+CMR12 findfont ct_VMDictPut/SRIVAI+CMR12*1 [48{/.notdef}rp /zero /one 206{/.notdef}rp]SRIVAI+CMR12 nfSRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf37.3673 205.562 mo(10)[5.84606 0 ]xsh%ADOBeginSubsetFont: TAAAAA+CMMI12 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /TAAAAA+CMMI12 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI12.) def/Weight (Medium) def/ItalicAngle -14.04 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 58 /period putdef/UniqueID 5087386 def/FontBBox {-31 -250 1026 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 441 452 463 683 704] def/OtherBlues [-204 -194] def/BlueScale 0.04379 def/StdHW [22] def/StdVW [65] def/StemSnapH [22 29] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/period <1C60D8A8C9B85D12B760F96B699981ADCC05D5F2AC0EA1A05113FD32301B2380F6511B97797896DB> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SRIVAJ+CMMI12 /TAAAAA+CMMI12 findfont ct_VMDictPut/SRIVAJ+CMMI12*1 [58{/.notdef}rp /period 197{/.notdef}rp]SRIVAJ+CMMI12 nfSRIVAJ+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf49.0733 205.562 mo(:)shSRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf52.3249 205.562 mo(0)sh92.159 190.26 mo
92.159 193.76 li
f
92.159 190.26 mo
92.159 193.76 li
@
%ADOBeginSubsetFont: XAAAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSRIVAI+CMR12 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B752AB3751B7115F440B017A800C9966F9D6C8D899B69B535555547C6BA24B6E1F046DE16579F205857804134562B1E66D1B74F5C065BE4758EAA51BE86F23919207272A8508C865B8FC972FA5EECD6D618D03C944A0B51056C9A643AEE9E15B7819729DCB8546556AE1AA15DC7D1BB3C46B74A340814C1894F0D8820D897F> |-systemdict /gcheck known {setglobal} if end {end} ifendSRIVAI+CMR12 /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/SRIVAI+CMR12*1 [48{/.notdef}rp /zero /one /two 205{/.notdef}rp]SRIVAI+CMR12 nfSRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf81.7537 205.562 mo(12)[5.84606 0 ]xshSRIVAJ+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf93.4596 205.562 mo(:)sh%ADOBeginSubsetFont: XAAAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSRIVAI+CMR12 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B752ABCAAA254E5D87FCEAB6A0AE2B8052A7BEE91D3A65F575EE4B3B66296C0FE52EA82CE011CF61C01B6A605CD47A5F6A10F9A4E21D79257A513D084EB04BB5AC6A06F1C7B044EA4769F93193E4526D5AA704F93CDFB19EC0E1FEFDBFECCA93D26919EE1DEA3E9D21B9BBE6473D9D0C84AFAE56833A7C6A724DAE6294B8218D36689219603A3A1CC8F24F42576EEE325B8970F582A898EAC65A50F6F13F284ADC24DFB12DA5162556FAFAA1E0644E0CE4F567272CAB0D60E2783CDCC2D13299> |-systemdict /gcheck known {setglobal} if end {end} ifendSRIVAI+CMR12 /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/SRIVAI+CMR12*1 [48{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]SRIVAI+CMR12 nfSRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf96.7113 205.562 mo(5)sh136.545 190.26 mo
136.545 193.76 li
f
136.545 190.26 mo
136.545 193.76 li
@
SRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf126.14 205.562 mo(15)[5.84605 0 ]xshSRIVAJ+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf137.846 205.562 mo(:)shSRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf141.098 205.562 mo(0)sh180.932 190.26 mo
180.932 193.76 li
f
180.932 190.26 mo
180.932 193.76 li
@
%ADOBeginSubsetFont: XAAAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSRIVAI+CMR12 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/seven <1C60D8A8C9B752ABCAACC01234363602A5DA369D8A7A2C812791E02EA813877A36B1730DD3FFD45969B68012F0879EE39F1A61BC6B6835FBF38F58E3851A97A338BA8F54219ED092B96AC1D5F9979038F8C5A89BAB5E7AF7AEC2A1F8BBBBBD42791F3801BDF5> |-systemdict /gcheck known {setglobal} if end {end} ifendSRIVAI+CMR12 /Encoding getdup 55 /seven putpop%ADOEndSubsetFont
/SRIVAI+CMR12*1 [48{/.notdef}rp /zero /one /two 2{/.notdef}rp /five /.notdef /seven 200{/.notdef}rp]SRIVAI+CMR12 nfSRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf170.526 205.562 mo(17)[5.84605 0 ]xshSRIVAJ+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf182.232 205.562 mo(:)shSRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf185.484 205.562 mo(5)sh225.318 190.26 mo
225.318 193.76 li
f
225.318 190.26 mo
225.318 193.76 li
@
SRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf214.913 205.562 mo(20)[5.84605 0 ]xshSRIVAJ+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf226.619 205.562 mo(:)shSRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf229.87 205.562 mo(0)sh%ADOBeginSubsetFont: XAAAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSRIVAI+CMR12 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B82424A9C89C4F9B2EA301917DC41B2F6B065AA459E868BF5F> |-/A <1C60D8A8C9B613326598F7657C1643B36DF4E6D431FD668445BB11FE398088DEE5A41C4AFFA403F0B7993B417EB7B3B15FEBEFE16C348F00B50710577245EC5725E9F7A6AAD22231B018526DFA67DBA7FB9A721F767D3ACD10D72F32D53B38D4ABB201E09E6F027C714F91F99425AAFDD762AAF18CF265F105D8EFB608F6715CBA54F412965937F206A97D76A83E24CEECA3EF6DFFED913B8A8C5BAFEAC7265BC56D1F6D1BA43E0BCCDCBA7B1982A76772F66F244B6DC5AE7E4FE4D33217F407CABB06> |-/K <1C60D8A8C9B6EC34E677596D5CC913AFE00823247766E75EF73A8E12AC994F153CBF9EF7766A4140FF389B167D8A040E572765B1C032C8280FEB746FB1239017A8CD47B68AEAC693DADD348E96B03E2DC8B79C53B19B94E0190F1AE90322E86E99ACAE7C743FEE23FC46DA9141F9E9EA93ECABB1DC203784A658E240EB030721D069F9EC1CA31E95D9592CC569F0FB22D78142D03C80C752D2B1C1358DC78421DB7EACB1ED28D7BD030CF2CDE6E476E763221007EA40C2E70C329232CA1E60258777DB0BD19F6E517BF8221DD3F6E584E19B900E0A83A3CBE6E9830EA0682F7B6598F2AFDC543D6959888369F3936C1909D1B8E62BF45E66E75C31252AFEC5532963E1F2065E7626B39E511A4F6DCF271656335BF3B19C8E2E30A05F174660B304F2EA72C55F14C994ACABBB> |-/P <1C60D8A8C9B64FADC67A3B29C41FF526FE61435F7AF161F2BEF1560931F99F39BD10D18D7668A3C13BC69BF258FAF1C08BCC6473E419DA4AC9449221BC1F6365A57A3D50A28BA5C6E35259A424E77EA995743B8E5E679CD43DFAF3929282E56D9E229B29F1FBB01986DDB5091773806A00982D9DCC86EA6913EF44DE15B837FE2183A8C81C7F23CB9E0E0BEB14C50B2A5ED353DA14AECF> |-/R <1C60D8A8C9B605F85259B5A7B39F0818D5C7E00C71F9A45B8D5004FC8B52A5654B44039171F8DE581451E92B658F040DCDCD8A5B3528BFE562C14AE37A892C3F38AB6A376E8292091EFCBF5165DC5D090B60329455E5A3991FCA5EF70D547A82157018FCB66BF7B441E16A1B5605CE2E127D1F36FCB636EB6C285B18D73D1BA50A1F99404DAD1076FE98A014710A26C7CAC5D9687FEA24111D315802549A8F8EEDA9821B9968B0A0826EC52A79C4491F0E002A340B751561635BC5AB1649F20A6973A51980F930FD36016F33CDEC095143E98936CADFA2C7B3C5A9541C2298858E621D60E224EE3AFBB5982CD011B9DDA19C11846EDA33D34A36C4> |-/S <1C60D8A8C9B79C5F60E074FC484CE30A747880B5044B7D08F15D2D72D687D666DA0E65CB5A3BFE0BA26E32D9FD8192E0FAA98FE55C845729DFF9F526267BE8F9F2B7A9ACEA81814A9137C11214BF27EB0F271EF6260AAA5DFAFCF249D04D4EACED86E5B9EF95963F1229988F8D2D50A7E56937D20EDBB65B7F8004DC74366B6BE3759AFF224B2CEA96C906AF65F142304DC32938F019F70AB88E3C052B1722EF7690AF238743BCE85F33B8D27EC937C8DE80D8F709D47FCEA861F85383CA11FAFA862CC2EAC3EF7B16FE> |-/T <1C60D8A8C9B636759BD93531AB0B3EF3EFDA8DE57E25CF2BD120D247F052CB5532AD3820C7277E685BF514860F5CDF32B2BD61E2A2E2C448F17D6A1DCFD2A3FFC51C643B084662CD90DB5293FB713F328DB88F83EFA6473829825049E247084809068C3BEA0934725D86ADF7341FB9CAFA6ECBBE334D05273A8ADB024991FD52A37173D8E966AEDCA718E806924108902F455A> |-/a <1C60D8A8C9B752AB3DC5DF79137F171AB577EC746E9985BD1DE96837CEF1DEA48D7D27260C7C7322F99E4296B839C62F65A64E636BC474CE2239895BE8656790A0C5CA6031741B0F7FABFF0A46B85CB2914D6506539949EE96DF768328856311BCC165C9E04D0C64F4698152B28ECBF186E6D19CF18C2535D7AFD403DD42BDCC8DAD14BDCC9C9A4F278509AB5C49AE5DB321EED2831122881D8D62586149EF7F> |-/b <1C60D8A8C9B79C5F973E01663BD36EF6A8BF02D069A7EE989ECF5D0393F400A4CC7FFE9B00309A44B53B429855D059F1EB9BD1DBFB0DF9195F931EF7EA5491C8D43611A22051624BF1706B27EC567B49209039693A163969C46FF4B733DB455CE95724C0864BD36065B5C636D55BF0A13C932633643B396D215B6D38EC9AAB9ACE862F66BC4A199E> |-/d <1C60D8A8C9B79C5F973E01663BD36EF6A8BF028D4B0A7A4D9A6B1D8F8010C50CB86E629F9BA29716CB03A29B62B2BC55176F9023051921DDD1ABA12B2D1931F5305D2F2C6A93A518F54BAB51C13B6E7278B0BF99D06C13B9ED52D0A2FE43A7DA2672E57649FA06D9304D05278701CCD983A0F2E5F0F077D1FA728F1AFE6F10AE3152B97E4D2200C0E44E2F1A83> |-/e <1C60D8A8C9B7686E50B91A10F4C805B90007B8ED9F69CD2ABB860BC6B4C24ADD309DD878EF1585F238AE8F9D91356FA3239D5176BBB7DB2E85C191C46227879B3BF7D3968B6A2DF76C157A7C772E03B2D4C63BD69B1201900C6BD10D61A3ACE648AF080836F4E237C1FE890558DD8376> |-/f <1C60D8A8C9B8418669523E84D09FFECF53410DB70379DEC38D02232E07464685F3EC78C4446599065FF58DDFB8E548ECFC904A52B6282F09EB547C303AA492145B455F05A013C3831043B4015F3586892E8FABEF1DC9D0F105AADC0DC2D8990057E512587B8BE3CDEB9A7989AB6F6D4F3E13C1AD2A318450BB6E19462D24D7E11A62477410758B92BFAC5FFDEAB6A843A599C5441B39BC> |-/i <1C60D8A8C9B85D12B724967C6CB76D0959368207B4342C19CE1B9EC1C979AFE39945CDB07DCB68293DEF3F9F5B5DDD81F9245C20D5895AB44AE881F948D9AA2C98FD220B63C8E09F1AB810D64CA173E795C253747F5788C563CE245C4123BABA356BA9A298ED2228E0B30341F78270B1D0D1ECB7ED7474C78F> |-/l <1C60D8A8C9B85D12B724967D35F648783331BBC1EE8DB5003079F7430DA43E81BBC7468DA6B1B45BE0E5907E1FD60F6A47B1CFDFF488C6309642616C183AB49CEE81F55EF5087AB0E56404FBB1395EDD51A084257E4A1ADB8135145C> |-/m <1C60D8A8C9B6A283882D363B297DC57602AD66D72CBDD14B96028B2117AEF8EB136D25775EDA43CFEC4B116DA2DA96DF40A59AD9C36883BE70C73BB47C182B3B2165186260C1A6A3346C491D60A82CC3710CBFDF5D41A93DFE15B1E9657F856AEA13843CBCF324C7F16659D7A3E262F7907AD214A2AA60E6C8D1180555ECA65AE18EC4F564C8F81E6C9EF02EF5E221BE67A216CC97719F71A73C30B051EB2E34C38BE563FAE3A3D3F17702CC4D3A0BFDDDA19480DF898FB02FD8EDEBCEAE9F5EA5799465A5085FB81855D4CB0AD54165408FE59CDCBFCC87FF2417A8A3E3573392746E6E750807B47EA14470F9ED2DA2D88F35335023DFEAE9B0F377CFEAF4606DBC8A627207D1BB55B9AE3BFA16942EF0CC5E7721356B> |-/n <1C60D8A8C9B79C5F9DD058B93AC6789F3CBB814BFC1F00EDB54718B7393928D3B2265CD93D424660C039425CBA4398983D3A3E0B2F08E4ECAAC3A11CEE6AA91394591D10563F18B25C1714DF0FF3721666094230FA4F024DEE11AC8130DA2FCE9082EBB1BDBAD74BEA1646226506565238B4B08B6317D554CCC162155DA4CAC5F0A99B2D53A7B6A1D2819C65F282360783E5114E4B70FA9BB0E38436A61EF9BC341E7A8D15474081F3D30667FD4E969668F84544C7B939C80D37CF3217308F8868> |-/o <1C60D8A8C9B752AB3DFB68D30F19F1CA9272CDB5ACB821A6F71A9CC3442938CF6346EFA7660C66DA069F5EBDC24067D57DFFC05D80799E177A95094BFCA67A276154D6CBA4C1E5D133279DB5B2E0A865041C00DB37E8AF5290A042E491412C351C8C067D23CD2917758C0BCC7C9DAFE0DE1029A6C28786> |-/r <1C60D8A8C9B73F59AC4C5EA853B4E2F03C64C0C05FD52BC33122FCCA4BFD51EB9E09AC5195D025A282E25ADC995FA462E62BFD3FBB78FCF4F94F52F42782F1036F93757E7816AB901DD476C8DB29DFD76A8F977E55D47316848B4CBB9C2E9C231E1377AEA3E4ABB6343871DED0448700F525D58C2DDE58DACF835ADC433BD339598286578A85E865AA10027CFEFDE957> |-/s <1C60D8A8C9B7397095546C4A386811A909F264178C102E37E91BC31B924D9B3178CC879F813C9FBB28DDFAFB5E4DB00AB47969517F6CA9E4D009805CCA02704F29F1D897E47248614C06B38AB9A6CC2CEE2ABD4589B792535C94946347E192BCD5837CE43D7ADDA9D020C9042E829DE580CEC30A08C16AC2D87AF6B276C3A330306CED37BE405496AC7E42FA5ED43499AD61FCD13817A426BD247F0B326AA7AE4D4BC1AB9BB25568BB7CBC493F05A0BA6E2659752A4C90130ADF1F0C148FA36155> |-/z <1C60D8A8C9B7686E5A88A16B819DAC4624FD4133F44A83ADE2469F2FBD929F6FBFC7FA5607B0EB294ADBB36E739A2434650578C176068CA2ACC5658CB02A44D2179C11FDB374F802E5D7997C1DF831D8E81123AA6CBDFA49A8> |-systemdict /gcheck known {setglobal} if end {end} ifendSRIVAI+CMR12 /Encoding getdup 45 /hyphen putdup 65 /A putdup 75 /K putdup 80 /P putdup 82 /R putdup 83 /S putdup 84 /T putdup 97 /a putdup 98 /b putdup 100 /d putdup 101 /e putdup 102 /f putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 122 /z putpop%ADOEndSubsetFont
/SRIVAI+CMR12*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 2{/.notdef}rp /five /.notdef /seven 9{/.notdef}rp /A 9{/.notdef}rp /K 4{/.notdef}rp /P /.notdef /R /S /T 12{/.notdef}rp /a /b /.notdef /d /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s 6{/.notdef}rp /z 133{/.notdef}rp]SRIVAI+CMR12 nfSRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf53.9268 220.189 mo(Problem)sh100.855 220.189 mo(size)sh123.013 220.189 mo(ofRandomK-SAT)[5.84605 7.47653 8.60774 5.84605 6.49165 6.49164 5.84607 13.6455 9.0979 3.89743 6.49165 7.79952 0 ]xsh38.8953 173.273 mo
35.3953 173.273 li
f
38.8953 173.273 mo
35.3953 173.273 li
@
SRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf15.9552 177.424 mo(10)[5.84606 0 ]xsh%ADOBeginSubsetFont: BBAAAA+CMR8 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /BBAAAA+CMR8 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR8.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdef/UniqueID 5000791 def/FontBBox {-36 -250 1070 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 446 665 675 683 704] def/OtherBlues [-205 -194] def/BlueScale 0.04379 def/StdHW [33] def/StdVW [76] def/StemSnapH [28 33] def/StemSnapV [76 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/zero <1C60D8A8C9B7883CBAA78CA806F705F10D1AC319938D611C6D9BBD69F6190342FB8FEE9368658E53BCE0AE7824A3280DBA7A5BEF9C087CCC08CFF6EE3D1CDFAC58984B448A56F36AF08290137970E991F67C347622795CF41E8928BFB8E257576760A149EDA95EF674E027B6AB519EF80CF7C75785FE2FE5A8F75A3518927237EA043AA5EE9A8092D5C4A8721DCA0DF83E6E87BB> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SRIVAK+CMR8 /BBAAAA+CMR8 findfont ct_VMDictPut/SRIVAK+CMR8*1 [48{/.notdef}rp /zero 207{/.notdef}rp]SRIVAK+CMR8 nfSRIVAK+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf27.6611 173.086 mo(0)sh38.8953 101.603 mo
35.3953 101.603 li
f
38.8953 101.603 mo
35.3953 101.603 li
@
SRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf15.9552 105.754 mo(10)[5.84606 0 ]xsh%ADOBeginSubsetFont: BBAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSRIVAK+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7883C47E9695A643EC7CDC9D492AB150D29B838BCDE529851B4F36139BB3C5556B7F7E4934494C8CA669B61323ACA68A6240E429D123FC3286EBB7794C68A02175F48138D7512A6C24D04FF2F8E1915AEBF24AD4C9B5E652D787177BE307207126057745DD2D6A7D78294> |-systemdict /gcheck known {setglobal} if end {end} ifendSRIVAK+CMR8 /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/SRIVAK+CMR8*1 [48{/.notdef}rp /zero /one 206{/.notdef}rp]SRIVAK+CMR8 nfSRIVAK+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf27.6611 101.416 mo(1)sh38.8953 29.9331 mo
35.3953 29.9331 li
f
38.8953 29.9331 mo
35.3953 29.9331 li
@
SRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf15.9552 34.0842 mo(10)[5.84606 0 ]xsh%ADOBeginSubsetFont: BBAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSRIVAK+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7883C479819BD474E9964F6BF369AAF487ABFE629F8A56337D176F7C9556B1CAAE607CA6285C927013D8BDE6137B6739AFDAF8D7D8B1E86BAFBB9D834592D58F996DFF88B929F1FABA7347C2BBDB5519BE210DDE834DD1DCB9A84AA77E585DFD5A86708901622F6AC3CFFFF626D8C5FD08A157C4A8F19F7F5FA2E61175441FDD6> |-systemdict /gcheck known {setglobal} if end {end} ifendSRIVAK+CMR8 /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/SRIVAK+CMR8*1 [48{/.notdef}rp /zero /one /two 205{/.notdef}rp]SRIVAK+CMR8 nfSRIVAK+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf27.6611 29.7458 mo(2)sh38.8953 189.173 mo
36.8953 189.173 li
f
.6 lw
38.8953 189.173 mo
36.8953 189.173 li
@
38.8953 184.375 mo
36.8953 184.375 li
f
38.8953 184.375 mo
36.8953 184.375 li
@
38.8953 180.219 mo
36.8953 180.219 li
f
38.8953 180.219 mo
36.8953 180.219 li
@
38.8953 176.553 mo
36.8953 176.553 li
f
38.8953 176.553 mo
36.8953 176.553 li
@
38.8953 151.698 mo
36.8953 151.698 li
f
38.8953 151.698 mo
36.8953 151.698 li
@
38.8953 139.078 mo
36.8953 139.078 li
f
38.8953 139.078 mo
36.8953 139.078 li
@
38.8953 130.123 mo
36.8953 130.123 li
f
38.8953 130.123 mo
36.8953 130.123 li
@
38.8953 123.178 mo
36.8953 123.178 li
f
38.8953 123.178 mo
36.8953 123.178 li
@
38.8953 117.503 mo
36.8953 117.503 li
f
38.8953 117.503 mo
36.8953 117.503 li
@
38.8953 112.705 mo
36.8953 112.705 li
f
38.8953 112.705 mo
36.8953 112.705 li
@
38.8953 108.549 mo
36.8953 108.549 li
f
38.8953 108.549 mo
36.8953 108.549 li
@
38.8953 104.883 mo
36.8953 104.883 li
f
38.8953 104.883 mo
36.8953 104.883 li
@
38.8953 80.0283 mo
36.8953 80.0283 li
f
38.8953 80.0283 mo
36.8953 80.0283 li
@
38.8953 67.4078 mo
36.8953 67.4078 li
f
38.8953 67.4078 mo
36.8953 67.4078 li
@
38.8953 58.4535 mo
36.8953 58.4535 li
f
38.8953 58.4535 mo
36.8953 58.4535 li
@
38.8953 51.508 mo
36.8953 51.508 li
f
38.8953 51.508 mo
36.8953 51.508 li
@
38.8953 45.833 mo
36.8953 45.833 li
f
38.8953 45.833 mo
36.8953 45.833 li
@
38.8953 41.035 mo
36.8953 41.035 li
f
38.8953 41.035 mo
36.8953 41.035 li
@
38.8953 36.8787 mo
36.8953 36.8787 li
f
38.8953 36.8787 mo
36.8953 36.8787 li
@
38.8953 33.2126 mo
36.8953 33.2126 li
f
38.8953 33.2126 mo
36.8953 33.2126 li
@
38.8953 8.35832 mo
36.8953 8.35832 li
f
38.8953 8.35832 mo
36.8953 8.35832 li
@
%ADOBeginSubsetFont: XAAAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSRIVAI+CMR12 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B73F59DC1736782E4C1C19EDD64255E2393C5024B28DF3DAD1F658B414FFC7F6340C09154655276EBE3A864FAA5F25254ADD1D66AD32F6F0ED72B2779D8B9CBC436F290A3FD41D2FEAF5BB166225967C60AC03264461C3B610DAE07B90E04CD1> |-/parenright <1C60D8A8C9B73F59DC1736782E4C1C19F750FC29D76AE903C84F39596182123C2F9BBABDCD183CD0A7F2DCF7F475747A3C66A218A2ACC3729267893607CC6D4EBAC9D3F2D1F9916BC173F64DE0D89D4D55EAF7634E8836B2C245A5674692FCF9DAC6CD845FC5E88E> |-/E <1C60D8A8C9B64FADC67A3B29F1AD98CA242674984D6E7901B01ED8DB90F09D99AA7AB11126C1B3D48B7D0FED339D66F47100C20407723CF7157A740502DCD70C242C8BD6339E5F6DC96CBCF8B762B5ED3F971EDF92F7C1381442A4DB01355F8FEFEB9FD75EEFE875FF0D111A2FD02AFEAD5276BAB56D51FCEBBB177D0E1008DAB161> |-/c <1C60D8A8C9B7686E50B91A103C25982F9A302EA4F8141240DCC661C74F885E7E26E132F04A32F771AF1E981D85F2F45479CE056A7979B5D31D6ACDE50657395AA1E0804FC72234B35D73160EC1DB8AC3DC589CD9CD13254678243B8E8AFFA7C9C49116F9C3FD5CFBBEEBE8EFE08DFB00> |-/g <1C60D8A8C9B752AB470B4A9661AD18D19A581C4D690EDDD4100E53B28E9F7BBEDEAA1385B79045B700DEA568C3019E5C596E7A66C5BC825F40CE296C60F1B092B5BB14AFFFAFC76A328AC29586AC90AAB636CC004C7ED9FBF40060B03EEDA84B8C35DE7A42F46EEF6201A70FE64C1DF3B9689FDFC6452A26797E5D5B28F0314F337B3ABD23CD4B5C8ABC1D39DA1F56BC8A5D8E6BAEB4DF785AE9CB937C45B0390FC706BE0196DADFEB0D01F7F2BE059EE99CFF11EB45B089108526DA6402A0E965D58457B51B3E9964B87513B82E9A621770523EE5CD42171AEDF8901601746780534133C2F8427ADD19CBC6B5800A44F412C931DF053A5A5E60930FE1276D661D1D1E1BCEB08D8536C6E9> |-/p <1C60D8A8C9B79C5FEDAC3A5356612CABCD4B9B1627D68462987B7A70A6F73E962D75C0768D4251A1A9D7D2337D7BBECE040BEC6CE049708ED932D339620D1B8715D1596A1865F43ABB89A0C1B60EB8D33E9DCA285F730839BEC55CE38C57C17862D101F34E39EFFAD28CAC702FF76E283D09625FCCA7E3A1E34ED19135AF7AACEAD2ADC4454A31D80873574D5E5E5331CE826316DB0221E51ECA76C5DD73AD0B85B75ACCFC6C8370EA3C7ECCBFAD28F838> |-/u <1C60D8A8C9B79C5F973E0166279F70672EBC89841EA2F6C6916249FF7730FDFB878E3685E5C001D8E6D0F7D826F009D3FC8EFCE4B248B62100A438B6E5EB2E9B4B75853ADF8C25B6B3965D080DC9A3EDBE25DAC5D4D23A3E962A425C47202B665CCA8F038084193F908BB9BE29956E> |-systemdict /gcheck known {setglobal} if end {end} ifendSRIVAI+CMR12 /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 69 /E putdup 99 /c putdup 103 /g putdup 112 /p putdup 117 /u putpop%ADOEndSubsetFont
/SRIVAI+CMR12*1 [40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 2{/.notdef}rp /five /.notdef /seven 9{/.notdef}rp /A 3{/.notdef}rp /E 5{/.notdef}rp /K 4{/.notdef}rp /P /.notdef /R /S /T 12{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /.notdef /u 4{/.notdef}rp /z 133{/.notdef}rp]SRIVAI+CMR12 nfSRIVAI+CMR12*1 [0 -11.9552 -11.9552 0 0 0 ]msf8.96638 167.835 mo(EmpiricalRunningTime\(s\))[-7.96216 -9.74348 -6.49165 -3.23981 -4.54301 -3.23981 -5.20047 -5.84605 -7.1418 -8.60773 -6.49165 -6.49164 -6.49165 -3.23981 -6.49165 -9.74805 -8.4523 -3.23981 -9.7435 -9.10245 -4.54303 -4.61472 0 ]yshgsave
48.6362 180.942 mo
65.6146 177.056 li
83.3446 174.806 li
83.4292 174.788 li
101.133 169.321 li
118.835 167.747 li
118.882 167.741 li
136.637 164.438 li
136.655 164.435 li
154.409 160.447 li
154.418 160.445 li
161.703 158.672 li
163.62 159.259 li
154.199 161.203 li
154.201 161.202 li
136.449 164.792 li
118.711 168.145 li
100.97 170.507 li
100.905 170.52 li
83.1814 175.336 li
65.4585 177.794 li
65.4351 177.798 li
48.6362 180.942 li
168.848 158.18 mo
166.552 157.492 li
172.134 156.133 li
189.85 154.687 li
189.903 154.68 li
207.625 151.298 li
224.818 150.296 li
224.818 150.944 li
207.508 152.895 li
189.754 154.856 li
189.734 154.859 li
171.98 157.535 li
171.953 157.54 li
168.848 158.18 li
clp
48.6362 150.296 mo
224.818 150.296 li
224.818 180.942 li
48.6362 180.942 li
cp
/1 
[/DeviceCMYK] /CSA add_res
0 .188235 .196078 0 cmyk
f
grestore
47.7731 182.112 mo
47.6573 182.112 47.5436 182.072 47.4532 181.997 cv
47.3391 181.902 47.2726 181.76 47.2726 181.612 cv
47.2726 180.626 li
47.2726 180.394 47.4344 180.191 47.6611 180.139 cv
47.7726 180.626 li
47.6611 180.139 li
65.4156 176.076 li
65.4643 176.067 li
83.1756 173.82 li
100.889 168.35 li
100.992 168.33 li
118.723 166.753 li
136.445 163.457 li
154.186 159.473 li
159.829 158.099 li
161.703 158.672 li
154.418 160.445 li
154.409 160.447 li
136.655 164.435 li
136.637 164.438 li
118.882 167.741 li
118.835 167.747 li
101.133 169.321 li
83.4292 174.788 li
83.3446 174.806 li
65.6146 177.056 li
48.6362 180.942 li
65.4351 177.798 li
65.4585 177.794 li
83.1814 175.336 li
100.905 170.52 li
100.97 170.507 li
118.711 168.145 li
136.449 164.792 li
154.201 161.202 li
154.199 161.203 li
163.62 159.259 li
165.614 159.869 li
154.401 162.182 li
154.399 162.183 li
136.644 165.772 li
136.638 165.774 li
118.884 169.13 li
118.857 169.134 li
101.135 171.494 li
83.4128 176.31 li
83.3504 176.322 li
65.6075 178.783 li
47.8646 182.103 li
47.8342 182.109 47.8036 182.112 47.7731 182.112 cv
170.865 158.785 mo
168.848 158.18 li
171.953 157.54 li
171.98 157.535 li
189.734 154.859 li
189.754 154.856 li
207.508 152.895 li
224.818 150.944 li
224.818 150.296 li
207.625 151.298 li
189.903 154.68 li
189.85 154.687 li
172.134 156.133 li
166.552 157.492 li
164.658 156.924 li
171.936 155.152 li
172.014 155.139 li
189.742 153.693 li
207.47 150.31 li
207.534 150.302 li
225.289 149.267 li
225.299 149.266 225.308 149.266 225.318 149.266 cv
225.445 149.266 225.568 149.314 225.661 149.402 cv
225.761 149.496 225.818 149.628 225.818 149.766 cv
225.818 151.391 li
225.818 151.646 225.627 151.86 225.374 151.888 cv
207.62 153.888 li
207.618 153.889 li
189.874 155.849 li
172.142 158.522 li
170.865 158.785 li
0 .188235 .196078 0 cmyk
f
107.924 116.833 mo
118.845 115.641 li
132.144 114.195 li
118.737 115.812 li
107.924 116.833 li
141.904 113.327 mo
154.336 112.425 li
154.344 112.425 li
172.098 110.866 li
172.104 110.866 li
189.855 109.079 li
207.602 107.578 li
224.818 106.388 li
224.818 106.885 li
207.533 107.928 li
207.521 107.928 li
189.767 109.438 li
172.013 110.932 li
172.009 110.932 li
154.261 112.541 li
141.904 113.327 li
.160784 .109804 0 0 cmyk
f
47.7726 124.706 mo
47.6528 124.706 47.5361 124.663 47.4445 124.583 cv
47.3353 124.488 47.2726 124.35 47.2726 124.206 cv
47.2726 123.557 li
47.2726 123.308 47.4554 123.098 47.7019 123.062 cv
47.7726 123.557 li
47.7019 123.062 li
65.4565 120.527 li
65.479 120.524 li
77.2551 119.386 li
78.1029 119.968 li
78.1275 119.932 li
79.5938 120.95 li
65.5843 122.214 li
47.842 124.701 li
47.8189 124.704 47.7956 124.706 47.7726 124.706 cv
82.5634 120.682 mo
82.4961 120.636 li
82.5326 120.583 li
80.8837 119.451 li
80.8451 119.507 li
80.2447 119.097 li
83.2266 118.808 li
100.974 116.586 li
100.982 116.585 li
118.737 114.647 li
136.491 112.717 li
136.509 112.715 li
154.259 111.428 li
172.008 109.87 li
189.759 108.083 li
189.767 108.083 li
207.521 106.581 li
207.529 106.581 li
225.284 105.353 li
225.295 105.352 225.307 105.352 225.319 105.352 cv
225.445 105.352 225.566 105.4 225.659 105.487 cv
225.761 105.582 225.818 105.713 225.818 105.852 cv
225.818 107.356 li
225.818 107.62 225.612 107.839 225.348 107.855 cv
207.6 108.925 li
189.851 110.434 li
172.096 111.928 li
172.1 111.928 li
154.345 113.538 li
154.332 113.539 li
136.591 114.667 li
118.851 116.805 li
118.838 116.807 li
101.089 118.483 li
83.3412 120.611 li
83.3266 120.613 li
82.5634 120.682 li
132.144 114.195 mo
118.845 115.641 li
107.924 116.833 li
118.737 115.812 li
132.144 114.195 li
224.818 106.388 mo
207.602 107.578 li
189.855 109.079 li
172.104 110.866 li
172.098 110.866 li
154.344 112.425 li
154.336 112.425 li
141.904 113.327 li
154.261 112.541 li
172.009 110.932 li
172.013 110.932 li
189.767 109.438 li
207.521 107.928 li
207.533 107.928 li
224.818 106.885 li
224.818 106.388 li
f
224.818 172.091 mo
223.917 171.912 li
223.929 171.846 li
224.818 172.001 li
224.818 172.091 li
221.955 171.521 mo
221.125 171.356 li
221.959 171.502 li
221.955 171.521 li
198.427 166.798 mo
196.467 166.399 li
196.483 166.322 li
198.428 166.792 li
198.427 166.798 li
194.507 166 mo
192.547 165.601 li
192.594 165.384 li
194.538 165.853 li
194.507 166 li
190.587 165.202 mo
189.917 165.066 li
188.636 164.76 li
188.716 164.435 li
189.685 164.682 li
189.692 164.684 li
190.649 164.915 li
190.587 165.202 li
186.69 164.295 mo
184.745 163.831 li
184.84 163.445 li
186.778 163.94 li
186.69 164.295 li
182.799 163.367 mo
180.854 162.902 li
180.964 162.455 li
182.902 162.95 li
182.799 163.367 li
178.909 162.438 mo
176.963 161.974 li
177.089 161.465 li
179.026 161.96 li
178.909 162.438 li
175.018 161.509 mo
173.072 161.045 li
173.213 160.476 li
175.151 160.971 li
175.018 161.509 li
171.136 160.512 mo
169.224 159.927 li
169.389 159.386 li
171.305 159.961 li
171.136 160.512 li
161.733 157.636 mo
161.573 157.587 li
161.726 157.088 li
162.736 157.391 li
161.733 157.636 li
159.661 157.002 mo
157.748 156.417 li
157.895 155.939 li
159.81 156.514 li
159.661 157.002 li
155.836 155.832 mo
154.446 155.407 li
154.424 155.401 li
153.926 155.273 li
154.044 154.794 li
154.172 154.823 li
155.979 155.365 li
155.836 155.832 li
151.988 154.776 mo
150.051 154.279 li
150.144 153.901 li
152.094 154.347 li
151.988 154.776 li
148.114 153.782 mo
146.176 153.285 li
146.245 153.009 li
148.195 153.455 li
148.114 153.782 li
144.239 152.788 mo
142.302 152.291 li
142.345 152.116 li
144.295 152.563 li
144.239 152.788 li
140.364 151.794 mo
138.427 151.297 li
138.445 151.224 li
140.395 151.67 li
140.364 151.794 li
.129412 0 .176471 0 cmyk
f
165.662 158.838 mo
165.398 158.757 li
165.558 158.237 li
166.786 158.606 li
165.662 158.838 li
.129412 .14902 .333333 0 cmyk
f
167.311 159.342 mo
165.662 158.838 li
166.786 158.606 li
167.473 158.812 li
167.311 159.342 li
163.486 158.172 mo
161.733 157.636 li
162.736 157.391 li
163.642 157.663 li
163.486 158.172 li
f
225.318 173.2 mo
225.286 173.2 225.253 173.197 225.22 173.191 cv
219.734 172.099 li
219.81 172.113 li
220.172 170.175 li
222.142 170.519 li
221.959 171.502 li
221.125 171.356 li
221.955 171.521 li
221.776 172.481 li
223.742 172.848 li
223.917 171.912 li
224.818 172.091 li
224.818 172.001 li
223.929 171.846 li
224.109 170.882 li
222.489 170.579 li
225.404 171.088 li
225.643 171.13 225.818 171.338 225.818 171.581 cv
225.818 172.7 li
225.818 172.85 225.751 172.992 225.635 173.087 cv
225.545 173.161 225.433 173.2 225.318 173.2 cv
217.848 171.724 mo
215.886 171.334 li
216.231 169.487 li
218.202 169.831 li
217.848 171.724 li
213.925 170.943 mo
211.963 170.553 li
212.291 168.799 li
214.261 169.143 li
213.925 170.943 li
210.001 170.163 mo
208.039 169.772 li
208.35 168.111 li
210.32 168.455 li
210.001 170.163 li
206.057 169.371 mo
204.097 168.973 li
204.472 167.221 li
206.417 167.691 li
206.057 169.371 li
202.137 168.574 mo
200.177 168.175 li
200.582 166.288 li
198.626 165.869 li
198.428 166.792 li
196.483 166.322 li
196.67 165.45 li
194.715 165.03 li
194.538 165.853 li
192.594 165.384 li
192.759 164.611 li
190.804 164.192 li
190.649 164.915 li
189.692 164.684 li
189.685 164.682 li
188.716 164.435 li
188.886 163.744 li
186.944 163.265 li
186.778 163.94 li
184.84 163.445 li
185.003 162.786 li
183.061 162.307 li
182.902 162.95 li
180.964 162.455 li
181.119 161.828 li
179.177 161.349 li
179.026 161.96 li
177.089 161.465 li
177.235 160.87 li
175.294 160.391 li
175.151 160.971 li
173.213 160.476 li
173.352 159.912 li
172.321 159.658 li
171.477 159.399 li
171.305 159.961 li
169.389 159.386 li
169.486 159.07 li
170.865 158.785 li
172.188 159.182 li
189.93 163.713 li
202.528 166.752 li
202.137 168.574 li
198.217 167.776 mo
196.257 167.377 li
196.467 166.399 li
198.427 166.798 li
198.217 167.776 li
194.297 166.978 mo
189.709 166.044 li
189.693 166.04 li
171.938 161.802 li
171.908 161.794 li
165.614 159.869 li
167.253 159.53 li
167.066 160.141 li
168.979 160.727 li
169.224 159.927 li
171.136 160.512 li
170.891 161.312 li
171.762 161.578 li
171.815 161.593 li
172.873 161.854 li
173.072 161.045 li
175.018 161.509 li
174.815 162.333 li
176.756 162.812 li
176.963 161.974 li
178.909 162.438 li
178.698 163.291 li
180.64 163.77 li
180.854 162.902 li
182.799 163.367 li
182.582 164.249 li
184.524 164.728 li
184.745 163.831 li
186.69 164.295 li
186.466 165.207 li
188.407 165.686 li
188.636 164.76 li
189.917 165.066 li
190.587 165.202 li
190.385 166.147 li
192.34 166.567 li
192.547 165.601 li
194.507 166 li
194.297 166.978 li
159.829 158.099 mo
154.165 156.366 li
136.421 151.815 li
136.331 151.782 li
136.279 151.757 li
136.305 151.767 li
138.195 152.234 li
138.427 151.297 li
140.364 151.794 li
140.137 152.715 li
142.078 153.195 li
142.302 152.291 li
144.239 152.788 li
144.02 153.675 li
145.961 154.155 li
146.176 153.285 li
148.114 153.782 li
147.902 154.636 li
149.844 155.116 li
150.051 154.279 li
151.988 154.776 li
151.785 155.596 li
153.727 156.077 li
153.926 155.273 li
154.424 155.401 li
154.446 155.407 li
155.836 155.832 li
155.592 156.629 li
157.504 157.215 li
157.748 156.417 li
159.661 157.002 li
159.417 157.8 li
160.144 158.023 li
159.829 158.099 li
161.545 157.682 mo
161.573 157.587 li
161.733 157.636 li
161.545 157.682 li
162.736 157.391 mo
161.726 157.088 li
161.914 156.473 li
160.002 155.888 li
159.81 156.514 li
157.895 155.939 li
158.09 155.302 li
156.177 154.717 li
155.979 155.365 li
154.172 154.823 li
154.044 154.794 li
154.207 154.135 li
152.266 153.655 li
152.094 154.347 li
150.144 153.901 li
150.324 153.175 li
148.383 152.694 li
148.195 153.455 li
146.245 153.009 li
146.441 152.214 li
144.5 151.734 li
144.295 152.563 li
142.345 152.116 li
142.558 151.253 li
140.617 150.773 li
140.395 151.67 li
138.445 151.224 li
138.675 150.293 li
136.785 149.825 li
136.612 150.526 li
136.084 151.665 li
134.276 150.809 li
135.087 149.061 li
136.707 149.8 li
154.411 153.852 li
154.444 153.86 li
164.658 156.924 li
163.95 157.096 li
163.827 157.058 li
163.804 157.131 li
162.736 157.391 li
132.469 149.952 mo
130.661 149.096 li
131.449 147.399 li
133.268 148.23 li
132.469 149.952 li
128.854 148.239 mo
127.046 147.383 li
127.81 145.737 li
129.629 146.568 li
128.854 148.239 li
125.239 146.527 mo
123.431 145.67 li
124.172 144.075 li
125.991 144.906 li
125.239 146.527 li
121.624 144.814 mo
119.817 143.958 li
120.533 142.413 li
122.352 143.244 li
121.624 144.814 li
117.978 143.049 mo
116.216 142.102 li
117.012 140.634 li
118.771 141.588 li
117.978 143.049 li
114.454 141.155 mo
112.693 140.209 li
113.496 138.728 li
115.254 139.681 li
114.454 141.155 li
110.931 139.262 mo
109.169 138.315 li
109.979 136.822 li
111.738 137.775 li
110.931 139.262 li
107.408 137.368 mo
105.646 136.421 li
106.463 134.916 li
108.221 135.869 li
107.408 137.368 li
103.884 135.474 mo
102.122 134.528 li
102.946 133.009 li
104.705 133.963 li
103.884 135.474 li
100.338 133.545 mo
98.6157 132.529 li
99.5101 131.033 li
101.22 132.07 li
100.338 133.545 li
96.8931 131.512 mo
95.1706 130.496 li
96.0896 128.959 li
97.7998 129.996 li
96.8931 131.512 li
93.448 129.48 mo
91.7254 128.463 li
92.669 126.885 li
94.3793 127.922 li
93.448 129.48 li
90.0029 127.447 mo
88.2803 126.431 li
89.2485 124.811 li
90.9588 125.848 li
90.0029 127.447 li
86.5577 125.414 mo
84.8352 124.398 li
85.828 122.737 li
87.5382 123.774 li
86.5577 125.414 li
84.1185 123.975 mo
83.0276 123.332 li
82.9966 123.312 li
81.4135 122.213 li
82.458 120.691 li
82.5634 120.682 li
83.5525 121.358 li
84.1177 121.701 li
83.1161 123.376 li
84.1185 123.975 li
79.7705 121.072 mo
79.5938 120.95 li
79.872 120.925 li
79.7705 121.072 li
78.5912 119.257 mo
79.194 118.378 li
80.2447 119.097 li
78.5912 119.257 li
76.4845 118.792 mo
74.8415 117.651 li
75.8918 116.121 li
77.5429 117.25 li
76.4845 118.792 li
73.1985 116.511 mo
71.5555 115.37 li
72.5896 113.864 li
74.2407 114.992 li
73.1985 116.511 li
69.9125 114.23 mo
68.2696 113.089 li
69.2874 111.606 li
70.9385 112.735 li
69.9125 114.23 li
66.6266 111.949 mo
65.2421 110.988 li
65.2311 110.98 li
64.9647 110.784 li
65.7335 109.741 li
66.4235 109.649 li
67.6363 110.478 li
66.6266 111.949 li
62.0121 108.614 mo
61.7415 108.415 li
62.7834 107.002 li
64.3944 108.187 li
64.3019 108.313 li
62.0121 108.614 li
60.1298 107.231 mo
58.5182 106.047 li
59.5614 104.632 li
61.1724 105.817 li
60.1298 107.231 li
56.9066 104.862 mo
55.295 103.678 li
56.3393 102.262 li
57.9503 103.447 li
56.9066 104.862 li
53.6833 102.494 mo
52.0717 101.309 li
53.1173 99.8912 li
54.7283 101.076 li
53.6833 102.494 li
51.1476 99.1924 mo
51.1476 98.4421 li
51.5063 98.706 li
51.1476 99.1924 li
.129412 0 .176471 0 cmyk
f
163.62 159.259 mo
161.703 158.672 li
163.464 158.243 li
163.242 158.971 li
163.957 159.19 li
163.62 159.259 li
165.354 158.901 mo
165.398 158.757 li
165.662 158.838 li
165.354 158.901 li
166.786 158.606 mo
165.558 158.237 li
165.724 157.693 li
166.552 157.492 li
168.848 158.18 li
168.039 158.347 li
167.652 158.229 li
167.587 158.441 li
166.786 158.606 li
.129412 .14902 .333333 0 cmyk
f
165.614 159.869 mo
163.62 159.259 li
163.957 159.19 li
165.154 159.556 li
165.354 158.901 li
165.662 158.838 li
167.311 159.342 li
167.253 159.53 li
165.614 159.869 li
169.486 159.07 mo
169.564 158.814 li
168.039 158.347 li
168.848 158.18 li
170.865 158.785 li
169.486 159.07 li
167.473 158.812 mo
166.786 158.606 li
167.587 158.441 li
167.473 158.812 li
161.703 158.672 mo
159.829 158.099 li
160.144 158.023 li
161.329 158.385 li
161.545 157.682 li
161.733 157.636 li
163.486 158.172 li
163.464 158.243 li
161.703 158.672 li
165.724 157.693 mo
165.739 157.644 li
163.95 157.096 li
164.658 156.924 li
166.552 157.492 li
165.724 157.693 li
163.642 157.663 mo
162.736 157.391 li
163.804 157.131 li
163.642 157.663 li
f
79.5938 120.95 mo
78.1275 119.932 li
78.5912 119.257 li
80.2447 119.097 li
80.8451 119.507 li
79.872 120.925 li
79.5938 120.95 li
82.458 120.691 mo
82.4961 120.636 li
82.5634 120.682 li
82.458 120.691 li
.258824 .0862745 .176471 0 cmyk
f
205.907 14.1268 mo
205.907 14.1264 li
207.693 13.6216 li
208.317 13.4636 li
208.32 13.4747 li
207.441 13.6965 li
207.428 13.6999 li
205.907 14.1268 li
214.138 12.0067 mo
214.134 11.9925 li
216.558 11.3795 li
216.562 11.3951 li
214.138 12.0067 li
219.47 10.6611 mo
219.466 10.6439 li
221.89 10.031 li
221.894 10.0494 li
219.47 10.6611 li
0 .0392157 .2 0 cmyk
f
160.135 26.7238 mo
160.132 26.712 li
160.132 24.8414 li
162.068 24.3172 li
162.543 26.0505 li
160.135 26.7238 li
165.432 25.2427 mo
164.963 23.533 li
167.377 22.8795 li
167.84 24.5694 li
165.432 25.2427 li
173.597 23.0604 mo
173.227 21.356 li
175.666 20.8101 li
176.044 22.5493 li
173.597 23.0604 li
178.981 21.936 mo
178.594 20.1551 li
181.034 19.6092 li
181.428 21.4249 li
178.981 21.936 li
187.302 20.1983 mo
186.889 18.2991 li
189.329 17.7532 li
189.748 19.6838 li
190.008 19.6273 li
189.944 19.6454 li
189.911 19.6534 li
187.302 20.1983 li
192.699 18.8723 mo
192.164 16.9727 li
194.57 16.2925 li
195.105 18.1957 li
200.881 16.5704 li
200.344 14.6602 li
202.749 13.98 li
203.288 15.8932 li
206.175 15.0805 li
205.907 14.1268 li
207.428 13.6999 li
207.441 13.6965 li
208.32 13.4747 li
208.561 14.4314 li
214.379 12.968 li
214.138 12.0067 li
216.562 11.3951 li
216.804 12.3582 li
219.713 11.6265 li
219.47 10.6611 li
221.894 10.0494 li
222.138 11.0167 li
225.314 10.2178 li
207.693 14.6644 li
192.699 18.8723 li
205.907 14.1264 mo
205.636 13.1638 li
207.427 12.6574 li
207.441 12.6537 li
208.073 12.4938 li
208.317 13.4636 li
207.693 13.6216 li
205.907 14.1264 li
209.614 12.1041 mo
225.195 8.16343 li
225.236 8.15328 225.277 8.14831 225.317 8.14831 cv
225.428 8.14831 225.537 8.18476 225.625 8.25365 cv
225.746 8.34798 225.818 8.49461 225.818 8.64816 cv
225.818 9.70122 li
225.818 9.88762 225.716 10.054 225.558 10.14 cv
225.074 8.2159 li
221.65 9.07713 li
221.89 10.031 li
219.466 10.6439 li
219.225 9.68691 li
216.316 10.4186 li
216.558 11.3795 li
214.134 11.9925 li
213.892 11.0283 li
209.614 12.1041 li
f
81.8888 106.56 mo
83.3471 106.328 li
84.9131 106.164 li
83.2181 106.381 li
83.2151 106.381 li
81.8888 106.56 li
.156863 .14902 0 0 cmyk
f
47.7735 112.052 mo
47.6527 112.052 47.5338 112.008 47.4424 111.928 cv
47.3351 111.834 47.2726 111.695 47.2726 111.552 cv
47.2726 110.992 li
47.2726 110.742 47.4591 110.529 47.7074 110.496 cv
47.7726 110.992 li
47.7074 110.496 li
62.0121 108.614 li
63.3531 109.6 li
63.2758 109.704 li
63.6852 110.006 li
47.8365 112.048 li
47.8155 112.051 47.7945 112.052 47.7735 112.052 cv
f
63.3531 109.6 mo
62.0121 108.614 li
64.3019 108.313 li
63.3531 109.6 li
.258824 .14902 .141176 0 cmyk
f
66.4235 109.649 mo
66.0102 109.366 li
66.0725 109.282 li
64.6896 108.262 li
65.4554 108.161 li
83.2031 105.338 li
83.2295 105.335 li
100.98 103.474 li
118.731 101.335 li
118.755 101.332 li
136.492 100.058 li
151.523 97.8954 li
152.769 98.801 li
152.572 99.4073 li
136.621 101.833 li
136.578 101.837 li
118.837 102.981 li
101.098 105.097 li
83.3453 107.373 li
83.3483 107.372 li
66.4235 109.649 li
84.9131 106.164 mo
83.3471 106.328 li
81.8888 106.56 li
83.2151 106.381 li
83.2181 106.381 li
84.9131 106.164 li
155.896 99.0023 mo
155.831 98.801 li
157.373 97.68 li
157.235 97.2541 li
172.009 96.0194 li
189.76 94.2621 li
189.768 94.2613 li
207.523 92.8004 li
207.519 92.8006 li
225.274 91.2248 li
225.289 91.2234 225.304 91.2228 225.319 91.2228 cv
225.443 91.2228 225.563 91.2689 225.656 91.3539 cv
225.76 91.4491 225.818 91.5817 225.818 91.7228 cv
225.818 92.3407 li
225.818 92.6002 225.619 92.8172 225.36 92.8389 cv
207.61 94.3333 li
189.858 96.0731 li
189.852 96.0737 li
172.097 97.5967 li
155.896 99.0023 li
.156863 .14902 0 0 cmyk
f
65.7335 109.741 mo
66.0102 109.366 li
66.4235 109.649 li
65.7335 109.741 li
.258824 .14902 .141176 0 cmyk
f
2 lw
1 lc
47.7726 181.107 mo
65.5272 177.357 li
83.2817 175.064 li
101.036 169.938 li
118.791 167.984 li
136.545 164.599 li
154.3 160.806 li
172.054 156.914 li
189.809 154.786 li
207.564 152.141 li
225.318 150.538 li
0 .942168 .982147 0 cmyk
@
47.7726 184.107 mo
48.5682 184.107 49.3313 183.791 49.8939 183.229 cv
50.4565 182.666 50.7726 181.903 50.7726 181.107 cv
50.7726 180.312 50.4565 179.549 49.8939 178.986 cv
49.3313 178.423 48.5682 178.107 47.7726 178.107 cv
46.977 178.107 46.2139 178.423 45.6513 178.986 cv
45.0887 179.549 44.7726 180.312 44.7726 181.107 cv
44.7726 181.903 45.0887 182.666 45.6513 183.229 cv
46.2139 183.791 46.977 184.107 47.7726 184.107 cv
cp
f
.75 lw
0 lc
47.7726 184.107 mo
48.5682 184.107 49.3313 183.791 49.8939 183.229 cv
50.4565 182.666 50.7726 181.903 50.7726 181.107 cv
50.7726 180.312 50.4565 179.549 49.8939 178.986 cv
49.3313 178.423 48.5682 178.107 47.7726 178.107 cv
46.977 178.107 46.2139 178.423 45.6513 178.986 cv
45.0887 179.549 44.7726 180.312 44.7726 181.107 cv
44.7726 181.903 45.0887 182.666 45.6513 183.229 cv
46.2139 183.791 46.977 184.107 47.7726 184.107 cv
cp
1 /0 /CSD get_res sepcs
0 sep
@
65.5272 180.357 mo
66.3228 180.357 67.0859 180.041 67.6485 179.478 cv
68.2111 178.916 68.5272 178.152 68.5272 177.357 cv
68.5272 176.561 68.2111 175.798 67.6485 175.235 cv
67.0859 174.673 66.3228 174.357 65.5272 174.357 cv
64.7315 174.357 63.9684 174.673 63.4058 175.235 cv
62.8433 175.798 62.5272 176.561 62.5272 177.357 cv
62.5272 178.152 62.8433 178.916 63.4058 179.478 cv
63.9684 180.041 64.7315 180.357 65.5272 180.357 cv
cp
0 .942168 .982147 0 cmyk
f
65.5272 180.357 mo
66.3228 180.357 67.0859 180.041 67.6485 179.478 cv
68.2111 178.916 68.5272 178.152 68.5272 177.357 cv
68.5272 176.561 68.2111 175.798 67.6485 175.235 cv
67.0859 174.673 66.3228 174.357 65.5272 174.357 cv
64.7315 174.357 63.9684 174.673 63.4058 175.235 cv
62.8433 175.798 62.5272 176.561 62.5272 177.357 cv
62.5272 178.152 62.8433 178.916 63.4058 179.478 cv
63.9684 180.041 64.7315 180.357 65.5272 180.357 cv
cp
1 /0 /CSD get_res sepcs
0 sep
@
83.2817 178.064 mo
84.0773 178.064 84.8404 177.748 85.403 177.186 cv
85.9656 176.623 86.2817 175.86 86.2817 175.064 cv
86.2817 174.269 85.9656 173.506 85.403 172.943 cv
84.8404 172.381 84.0773 172.064 83.2817 172.064 cv
82.4861 172.064 81.723 172.381 81.1604 172.943 cv
80.5978 173.506 80.2817 174.269 80.2817 175.064 cv
80.2817 175.86 80.5978 176.623 81.1604 177.186 cv
81.723 177.748 82.4861 178.064 83.2817 178.064 cv
cp
0 .942168 .982147 0 cmyk
f
83.2817 178.064 mo
84.0773 178.064 84.8404 177.748 85.403 177.186 cv
85.9656 176.623 86.2817 175.86 86.2817 175.064 cv
86.2817 174.269 85.9656 173.506 85.403 172.943 cv
84.8404 172.381 84.0773 172.064 83.2817 172.064 cv
82.4861 172.064 81.723 172.381 81.1604 172.943 cv
80.5978 173.506 80.2817 174.269 80.2817 175.064 cv
80.2817 175.86 80.5978 176.623 81.1604 177.186 cv
81.723 177.748 82.4861 178.064 83.2817 178.064 cv
cp
1 /0 /CSD get_res sepcs
0 sep
@
101.036 172.938 mo
101.832 172.938 102.595 172.622 103.158 172.06 cv
103.72 171.497 104.036 170.734 104.036 169.938 cv
104.036 169.143 103.72 168.38 103.158 167.817 cv
102.595 167.254 101.832 166.938 101.036 166.938 cv
100.241 166.938 99.4775 167.254 98.9149 167.817 cv
98.3524 168.38 98.0363 169.143 98.0363 169.938 cv
98.0363 170.734 98.3524 171.497 98.9149 172.06 cv
99.4775 172.622 100.241 172.938 101.036 172.938 cv
cp
0 .942168 .982147 0 cmyk
f
101.036 172.938 mo
101.832 172.938 102.595 172.622 103.158 172.06 cv
103.72 171.497 104.036 170.734 104.036 169.938 cv
104.036 169.143 103.72 168.38 103.158 167.817 cv
102.595 167.254 101.832 166.938 101.036 166.938 cv
100.241 166.938 99.4775 167.254 98.9149 167.817 cv
98.3524 168.38 98.0363 169.143 98.0363 169.938 cv
98.0363 170.734 98.3524 171.497 98.9149 172.06 cv
99.4775 172.622 100.241 172.938 101.036 172.938 cv
cp
1 /0 /CSD get_res sepcs
0 sep
@
118.791 170.984 mo
119.586 170.984 120.35 170.668 120.912 170.106 cv
121.475 169.543 121.791 168.78 121.791 167.984 cv
121.791 167.189 121.475 166.426 120.912 165.863 cv
120.35 165.3 119.586 164.984 118.791 164.984 cv
117.995 164.984 117.232 165.3 116.669 165.863 cv
116.107 166.426 115.791 167.189 115.791 167.984 cv
115.791 168.78 116.107 169.543 116.669 170.106 cv
117.232 170.668 117.995 170.984 118.791 170.984 cv
cp
0 .942168 .982147 0 cmyk
f
118.791 170.984 mo
119.586 170.984 120.35 170.668 120.912 170.106 cv
121.475 169.543 121.791 168.78 121.791 167.984 cv
121.791 167.189 121.475 166.426 120.912 165.863 cv
120.35 165.3 119.586 164.984 118.791 164.984 cv
117.995 164.984 117.232 165.3 116.669 165.863 cv
116.107 166.426 115.791 167.189 115.791 167.984 cv
115.791 168.78 116.107 169.543 116.669 170.106 cv
117.232 170.668 117.995 170.984 118.791 170.984 cv
cp
1 /0 /CSD get_res sepcs
0 sep
@
136.545 167.599 mo
137.341 167.599 138.104 167.283 138.667 166.72 cv
139.229 166.158 139.545 165.395 139.545 164.599 cv
139.545 163.803 139.229 163.04 138.667 162.478 cv
138.104 161.915 137.341 161.599 136.545 161.599 cv
135.75 161.599 134.987 161.915 134.424 162.478 cv
133.861 163.04 133.545 163.803 133.545 164.599 cv
133.545 165.395 133.861 166.158 134.424 166.72 cv
134.987 167.283 135.75 167.599 136.545 167.599 cv
cp
0 .942168 .982147 0 cmyk
f
136.545 167.599 mo
137.341 167.599 138.104 167.283 138.667 166.72 cv
139.229 166.158 139.545 165.395 139.545 164.599 cv
139.545 163.803 139.229 163.04 138.667 162.478 cv
138.104 161.915 137.341 161.599 136.545 161.599 cv
135.75 161.599 134.987 161.915 134.424 162.478 cv
133.861 163.04 133.545 163.803 133.545 164.599 cv
133.545 165.395 133.861 166.158 134.424 166.72 cv
134.987 167.283 135.75 167.599 136.545 167.599 cv
cp
1 /0 /CSD get_res sepcs
0 sep
@
154.3 163.806 mo
155.095 163.806 155.859 163.489 156.421 162.927 cv
156.984 162.364 157.3 161.601 157.3 160.806 cv
157.3 160.01 156.984 159.247 156.421 158.684 cv
155.859 158.122 155.095 157.806 154.3 157.806 cv
153.504 157.806 152.741 158.122 152.179 158.684 cv
151.616 159.247 151.3 160.01 151.3 160.806 cv
151.3 161.601 151.616 162.364 152.179 162.927 cv
152.741 163.489 153.504 163.806 154.3 163.806 cv
cp
0 .942168 .982147 0 cmyk
f
154.3 163.806 mo
155.095 163.806 155.859 163.489 156.421 162.927 cv
156.984 162.364 157.3 161.601 157.3 160.806 cv
157.3 160.01 156.984 159.247 156.421 158.684 cv
155.859 158.122 155.095 157.806 154.3 157.806 cv
153.504 157.806 152.741 158.122 152.179 158.684 cv
151.616 159.247 151.3 160.01 151.3 160.806 cv
151.3 161.601 151.616 162.364 152.179 162.927 cv
152.741 163.489 153.504 163.806 154.3 163.806 cv
cp
1 /0 /CSD get_res sepcs
0 sep
@
172.054 159.914 mo
172.85 159.914 173.613 159.598 174.176 159.036 cv
174.738 158.473 175.054 157.71 175.054 156.914 cv
175.054 156.119 174.738 155.356 174.176 154.793 cv
173.613 154.231 172.85 153.914 172.054 153.914 cv
171.259 153.914 170.496 154.231 169.933 154.793 cv
169.371 155.356 169.054 156.119 169.054 156.914 cv
169.054 157.71 169.371 158.473 169.933 159.036 cv
170.496 159.598 171.259 159.914 172.054 159.914 cv
cp
0 .942168 .982147 0 cmyk
f
172.054 159.914 mo
172.85 159.914 173.613 159.598 174.176 159.036 cv
174.738 158.473 175.054 157.71 175.054 156.914 cv
175.054 156.119 174.738 155.356 174.176 154.793 cv
173.613 154.231 172.85 153.914 172.054 153.914 cv
171.259 153.914 170.496 154.231 169.933 154.793 cv
169.371 155.356 169.054 156.119 169.054 156.914 cv
169.054 157.71 169.371 158.473 169.933 159.036 cv
170.496 159.598 171.259 159.914 172.054 159.914 cv
cp
1 /0 /CSD get_res sepcs
0 sep
@
189.809 157.786 mo
190.605 157.786 191.368 157.47 191.93 156.907 cv
192.493 156.345 192.809 155.582 192.809 154.786 cv
192.809 153.99 192.493 153.227 191.93 152.665 cv
191.368 152.102 190.605 151.786 189.809 151.786 cv
189.013 151.786 188.25 152.102 187.688 152.665 cv
187.125 153.227 186.809 153.99 186.809 154.786 cv
186.809 155.582 187.125 156.345 187.688 156.907 cv
188.25 157.47 189.013 157.786 189.809 157.786 cv
cp
0 .942168 .982147 0 cmyk
f
189.809 157.786 mo
190.605 157.786 191.368 157.47 191.93 156.907 cv
192.493 156.345 192.809 155.582 192.809 154.786 cv
192.809 153.99 192.493 153.227 191.93 152.665 cv
191.368 152.102 190.605 151.786 189.809 151.786 cv
189.013 151.786 188.25 152.102 187.688 152.665 cv
187.125 153.227 186.809 153.99 186.809 154.786 cv
186.809 155.582 187.125 156.345 187.688 156.907 cv
188.25 157.47 189.013 157.786 189.809 157.786 cv
cp
1 /0 /CSD get_res sepcs
0 sep
@
207.564 155.141 mo
208.359 155.141 209.122 154.825 209.685 154.262 cv
210.247 153.7 210.564 152.937 210.564 152.141 cv
210.564 151.345 210.247 150.582 209.685 150.02 cv
209.122 149.457 208.359 149.141 207.564 149.141 cv
206.768 149.141 206.005 149.457 205.442 150.02 cv
204.88 150.582 204.564 151.345 204.564 152.141 cv
204.564 152.937 204.88 153.7 205.442 154.262 cv
206.005 154.825 206.768 155.141 207.564 155.141 cv
cp
0 .942168 .982147 0 cmyk
f
207.564 155.141 mo
208.359 155.141 209.122 154.825 209.685 154.262 cv
210.247 153.7 210.564 152.937 210.564 152.141 cv
210.564 151.345 210.247 150.582 209.685 150.02 cv
209.122 149.457 208.359 149.141 207.564 149.141 cv
206.768 149.141 206.005 149.457 205.442 150.02 cv
204.88 150.582 204.564 151.345 204.564 152.141 cv
204.564 152.937 204.88 153.7 205.442 154.262 cv
206.005 154.825 206.768 155.141 207.564 155.141 cv
cp
1 /0 /CSD get_res sepcs
0 sep
@
225.318 153.538 mo
226.114 153.538 226.877 153.222 227.439 152.659 cv
228.002 152.097 228.318 151.334 228.318 150.538 cv
228.318 149.742 228.002 148.979 227.439 148.417 cv
226.877 147.854 226.114 147.538 225.318 147.538 cv
224.522 147.538 223.759 147.854 223.197 148.417 cv
222.634 148.979 222.318 149.742 222.318 150.538 cv
222.318 151.334 222.634 152.097 223.197 152.659 cv
223.759 153.222 224.522 153.538 225.318 153.538 cv
cp
0 .942168 .982147 0 cmyk
f
225.318 153.538 mo
226.114 153.538 226.877 153.222 227.439 152.659 cv
228.002 152.097 228.318 151.334 228.318 150.538 cv
228.318 149.742 228.002 148.979 227.439 148.417 cv
226.877 147.854 226.114 147.538 225.318 147.538 cv
224.522 147.538 223.759 147.854 223.197 148.417 cv
222.634 148.979 222.318 149.742 222.318 150.538 cv
222.318 151.334 222.634 152.097 223.197 152.659 cv
223.759 153.222 224.522 153.538 225.318 153.538 cv
cp
1 /0 /CSD get_res sepcs
0 sep
@
2 lw
[8 3 ] 0 dsh
47.7726 123.896 mo
65.5272 121.379 li
83.2817 119.718 li
101.036 117.557 li
118.791 115.752 li
136.545 113.729 li
154.3 112.516 li
172.054 110.893 li
189.809 109.24 li
207.564 107.779 li
225.318 106.626 li
.809354 .544823 0 0 cmyk
@
gsave
41.0226 130.646 mo
54.5226 130.646 li
54.5226 117.146 li
41.0226 117.146 li
41.0226 130.646 li
clp
47.7726 120.896 mo
44.7726 126.896 li
50.7726 126.896 li
cp
f
.75 lw
0 lj
[] 0 dsh
47.7726 120.896 mo
44.7726 126.896 li
50.7726 126.896 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
58.7771 128.129 mo
72.2772 128.129 li
72.2772 114.629 li
58.7771 114.629 li
58.7771 128.129 li
clp
65.5272 118.379 mo
62.5272 124.379 li
68.5272 124.379 li
cp
f
.75 lw
0 lj
[] 0 dsh
65.5272 118.379 mo
62.5272 124.379 li
68.5272 124.379 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
76.5317 126.468 mo
90.0317 126.468 li
90.0317 112.968 li
76.5317 112.968 li
76.5317 126.468 li
clp
83.2817 116.718 mo
80.2817 122.718 li
86.2817 122.718 li
cp
f
.75 lw
0 lj
[] 0 dsh
83.2817 116.718 mo
80.2817 122.718 li
86.2817 122.718 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
94.2863 124.307 mo
107.786 124.307 li
107.786 110.807 li
94.2863 110.807 li
94.2863 124.307 li
clp
101.036 114.557 mo
98.0363 120.557 li
104.036 120.557 li
cp
f
.75 lw
0 lj
[] 0 dsh
101.036 114.557 mo
98.0363 120.557 li
104.036 120.557 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
112.041 122.502 mo
125.541 122.502 li
125.541 109.002 li
112.041 109.002 li
112.041 122.502 li
clp
118.791 112.752 mo
115.791 118.752 li
121.791 118.752 li
cp
f
.75 lw
0 lj
[] 0 dsh
118.791 112.752 mo
115.791 118.752 li
121.791 118.752 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
129.795 120.479 mo
143.295 120.479 li
143.295 106.979 li
129.795 106.979 li
129.795 120.479 li
clp
136.545 110.729 mo
133.545 116.729 li
139.545 116.729 li
cp
f
.75 lw
0 lj
[] 0 dsh
136.545 110.729 mo
133.545 116.729 li
139.545 116.729 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
147.55 119.266 mo
161.05 119.266 li
161.05 105.766 li
147.55 105.766 li
147.55 119.266 li
clp
154.3 109.516 mo
151.3 115.516 li
157.3 115.516 li
cp
f
.75 lw
0 lj
[] 0 dsh
154.3 109.516 mo
151.3 115.516 li
157.3 115.516 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
165.304 117.643 mo
178.804 117.643 li
178.804 104.143 li
165.304 104.143 li
165.304 117.643 li
clp
172.054 107.893 mo
169.054 113.893 li
175.054 113.893 li
cp
f
.75 lw
0 lj
[] 0 dsh
172.054 107.893 mo
169.054 113.893 li
175.054 113.893 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
183.059 115.99 mo
196.559 115.99 li
196.559 102.49 li
183.059 102.49 li
183.059 115.99 li
clp
189.809 106.24 mo
186.809 112.24 li
192.809 112.24 li
cp
f
.75 lw
0 lj
[] 0 dsh
189.809 106.24 mo
186.809 112.24 li
192.809 112.24 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
200.814 114.529 mo
214.314 114.529 li
214.314 101.029 li
200.814 101.029 li
200.814 114.529 li
clp
207.564 104.779 mo
204.564 110.779 li
210.564 110.779 li
cp
f
.75 lw
0 lj
[] 0 dsh
207.564 104.779 mo
204.564 110.779 li
210.564 110.779 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
218.568 113.376 mo
232.068 113.376 li
232.068 99.8761 li
218.568 99.8761 li
218.568 113.376 li
clp
225.318 103.626 mo
222.318 109.626 li
228.318 109.626 li
cp
f
.75 lw
0 lj
[] 0 dsh
225.318 103.626 mo
222.318 109.626 li
228.318 109.626 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
48.3661 96.2247 mo
49.9758 97.4117 li
48.7888 99.0214 li
47.1791 97.8344 li
48.3661 96.2247 li
51.5854 98.5987 mo
53.1951 99.7857 li
52.0081 101.395 li
50.3984 100.208 li
51.5854 98.5987 li
54.8048 100.973 mo
56.4145 102.16 li
55.2275 103.769 li
53.6178 102.582 li
54.8048 100.973 li
58.0241 103.347 mo
59.6338 104.534 li
58.4468 106.143 li
56.8371 104.956 li
58.0241 103.347 li
61.2435 105.721 mo
62.8532 106.908 li
61.6662 108.517 li
60.0565 107.33 li
61.2435 105.721 li
64.4628 108.095 mo
66.0725 109.282 li
64.8855 110.891 li
63.2758 109.704 li
64.4628 108.095 li
67.6927 110.396 mo
69.3415 111.527 li
68.2097 113.176 li
66.5608 112.044 li
67.6927 110.396 li
70.9904 112.659 mo
72.6393 113.791 li
71.5074 115.44 li
69.8585 114.308 li
70.9904 112.659 li
74.2882 114.923 mo
75.9371 116.055 li
74.8052 117.704 li
73.1563 116.572 li
74.2882 114.923 li
77.586 117.187 mo
79.2348 118.319 li
78.1029 119.968 li
76.4541 118.836 li
77.586 117.187 li
80.8837 119.451 mo
82.5326 120.583 li
81.4007 122.232 li
79.7518 121.1 li
80.8837 119.451 li
84.1424 121.659 mo
85.859 122.686 li
84.8327 124.402 li
83.1161 123.376 li
84.1424 121.659 li
87.5755 123.712 mo
89.2922 124.738 li
88.2659 126.455 li
86.5493 125.429 li
87.5755 123.712 li
91.0088 125.765 mo
92.7253 126.791 li
91.6991 128.507 li
89.9825 127.481 li
91.0088 125.765 li
94.442 127.817 mo
96.1586 128.843 li
95.1323 130.56 li
93.4157 129.534 li
94.442 127.817 li
97.8751 129.87 mo
99.5918 130.896 li
98.5655 132.613 li
96.8489 131.586 li
97.8751 129.87 li
101.308 131.922 mo
101.531 132.056 li
103.024 132.866 li
102.07 134.624 li
100.559 133.804 li
100.523 133.783 li
100.282 133.639 li
101.308 131.922 li
104.782 133.82 mo
106.54 134.773 li
105.586 136.531 li
103.828 135.577 li
104.782 133.82 li
108.298 135.727 mo
110.056 136.681 li
109.102 138.439 li
107.344 137.485 li
108.298 135.727 li
111.814 137.635 mo
113.571 138.589 li
112.618 140.347 li
110.86 139.393 li
111.814 137.635 li
115.329 139.543 mo
117.087 140.497 li
116.133 142.255 li
114.375 141.301 li
115.329 139.543 li
118.845 141.451 mo
119.24 141.665 li
120.59 142.291 li
119.748 144.105 li
118.37 143.466 li
118.314 143.438 li
117.891 143.208 li
118.845 141.451 li
122.404 143.133 mo
124.218 143.975 li
123.377 145.789 li
121.562 144.947 li
122.404 143.133 li
126.032 144.816 mo
127.847 145.658 li
127.005 147.472 li
125.191 146.63 li
126.032 144.816 li
129.661 146.5 mo
131.475 147.341 li
130.634 149.156 li
128.819 148.314 li
129.661 146.5 li
133.29 148.183 mo
135.104 149.025 li
134.262 150.839 li
132.448 149.997 li
133.29 148.183 li
136.918 149.866 mo
136.966 149.889 li
136.545 150.796 li
136.785 149.825 li
138.675 150.293 li
138.195 152.234 li
136.305 151.767 li
136.125 151.703 li
136.076 151.681 li
136.918 149.866 li
140.617 150.773 mo
142.558 151.253 li
142.078 153.195 li
140.137 152.715 li
140.617 150.773 li
144.5 151.734 mo
146.441 152.214 li
145.961 154.155 li
144.02 153.675 li
144.5 151.734 li
148.383 152.694 mo
150.324 153.175 li
149.844 155.116 li
147.902 154.636 li
148.383 152.694 li
152.266 153.655 mo
154.207 154.135 li
153.727 156.077 li
151.785 155.596 li
152.266 153.655 li
156.177 154.717 mo
158.09 155.302 li
157.504 157.215 li
155.592 156.629 li
156.177 154.717 li
160.002 155.888 mo
161.914 156.473 li
161.329 158.385 li
159.417 157.8 li
160.002 155.888 li
163.827 157.058 mo
165.739 157.644 li
165.154 159.556 li
163.242 158.971 li
163.827 157.058 li
167.652 158.229 mo
169.564 158.814 li
168.979 160.727 li
167.066 160.141 li
167.652 158.229 li
171.477 159.399 mo
172.321 159.658 li
173.352 159.912 li
172.873 161.854 li
171.815 161.593 li
171.762 161.578 li
170.891 161.312 li
171.477 159.399 li
175.294 160.391 mo
177.235 160.87 li
176.756 162.812 li
174.815 162.333 li
175.294 160.391 li
179.177 161.349 mo
181.119 161.828 li
180.64 163.77 li
178.698 163.291 li
179.177 161.349 li
183.061 162.307 mo
185.003 162.786 li
184.524 164.728 li
182.582 164.249 li
183.061 162.307 li
186.944 163.265 mo
188.886 163.744 li
188.407 165.686 li
186.466 165.207 li
186.944 163.265 li
190.804 164.192 mo
192.759 164.611 li
192.34 166.567 li
190.385 166.147 li
190.804 164.192 li
194.715 165.03 mo
196.67 165.45 li
196.251 167.405 li
194.296 166.986 li
194.715 165.03 li
198.626 165.869 mo
200.582 166.288 li
200.162 168.244 li
198.207 167.825 li
198.626 165.869 li
202.537 166.707 mo
204.493 167.127 li
204.073 169.082 li
202.118 168.663 li
202.537 166.707 li
206.448 167.546 mo
207.76 167.827 li
208.381 167.943 li
208.014 169.909 li
207.38 169.791 li
207.354 169.786 li
206.029 169.502 li
206.448 167.546 li
210.347 168.311 mo
212.313 168.678 li
211.946 170.644 li
209.98 170.277 li
210.347 168.311 li
214.279 169.045 mo
216.245 169.413 li
215.878 171.379 li
213.912 171.011 li
214.279 169.045 li
218.211 169.78 mo
220.177 170.147 li
219.81 172.113 li
217.844 171.746 li
218.211 169.78 li
222.143 170.515 mo
224.109 170.882 li
223.742 172.848 li
221.776 172.481 li
222.143 170.515 li
.643641 0 .876829 0 cmyk
f
gsave
41.0226 103.78 mo
54.5226 103.78 li
54.5226 90.2796 li
41.0226 90.2796 li
41.0226 103.78 li
clp
44.7726 97.0296 mo
50.7726 100.03 li
50.7726 94.0296 li
44.7726 97.0296 li
f
44.7726 97.0296 mo
44.9403 96.6942 li
50.3976 99.4228 li
50.3976 94.6364 li
44.9403 97.365 li
44.7726 97.0296 li
44.9403 96.6942 li
44.7726 97.0296 li
44.6049 96.6942 li
51.1476 93.4228 li
51.1476 100.636 li
43.9341 97.0296 li
44.6049 96.6942 li
44.7726 97.0296 li
1 /0 /CSD get_res sepcs
0 sep
f
grestore
gsave
58.7771 116.872 mo
72.2772 116.872 li
72.2772 103.372 li
58.7771 103.372 li
58.7771 116.872 li
clp
62.5272 110.122 mo
68.5272 113.122 li
68.5272 107.122 li
cp
f
.75 lw
0 lj
[] 0 dsh
62.5272 110.122 mo
68.5272 113.122 li
68.5272 107.122 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
76.5317 129.06 mo
90.0317 129.06 li
90.0317 115.56 li
76.5317 115.56 li
76.5317 129.06 li
clp
80.2817 122.31 mo
86.2817 125.31 li
86.2817 119.31 li
cp
f
.75 lw
0 lj
[] 0 dsh
80.2817 122.31 mo
86.2817 125.31 li
86.2817 119.31 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
94.2863 139.675 mo
107.786 139.675 li
107.786 126.175 li
94.2863 126.175 li
94.2863 139.675 li
clp
98.0363 132.925 mo
104.036 135.925 li
104.036 129.925 li
cp
f
.75 lw
0 lj
[] 0 dsh
98.0363 132.925 mo
104.036 135.925 li
104.036 129.925 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
112.041 149.309 mo
125.541 149.309 li
125.541 135.809 li
112.041 135.809 li
112.041 149.309 li
clp
115.791 142.559 mo
121.791 145.559 li
121.791 139.559 li
cp
f
.75 lw
0 lj
[] 0 dsh
115.791 142.559 mo
121.791 145.559 li
121.791 139.559 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
129.795 157.546 mo
143.295 157.546 li
143.295 144.046 li
129.795 144.046 li
129.795 157.546 li
clp
133.545 150.796 mo
139.545 153.796 li
139.545 147.796 li
cp
f
.75 lw
0 lj
[] 0 dsh
133.545 150.796 mo
139.545 153.796 li
139.545 147.796 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
147.55 161.938 mo
161.05 161.938 li
161.05 148.438 li
147.55 148.438 li
147.55 161.938 li
clp
151.3 155.188 mo
157.3 158.188 li
157.3 152.188 li
cp
f
.75 lw
0 lj
[] 0 dsh
151.3 155.188 mo
157.3 158.188 li
157.3 152.188 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
165.304 167.372 mo
178.804 167.372 li
178.804 153.872 li
165.304 153.872 li
165.304 167.372 li
clp
169.054 160.622 mo
175.054 163.622 li
175.054 157.622 li
cp
f
.75 lw
0 lj
[] 0 dsh
169.054 160.622 mo
175.054 163.622 li
175.054 157.622 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
183.059 171.751 mo
196.559 171.751 li
196.559 158.251 li
183.059 158.251 li
183.059 171.751 li
clp
186.809 165.001 mo
192.809 168.001 li
192.809 162.001 li
cp
f
.75 lw
0 lj
[] 0 dsh
186.809 165.001 mo
192.809 168.001 li
192.809 162.001 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
200.814 175.558 mo
214.314 175.558 li
214.314 162.058 li
200.814 162.058 li
200.814 175.558 li
clp
204.564 168.808 mo
210.564 171.808 li
210.564 165.808 li
cp
f
.75 lw
0 lj
[] 0 dsh
204.564 168.808 mo
210.564 171.808 li
210.564 165.808 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
218.568 178.875 mo
232.068 178.875 li
232.068 165.375 li
218.568 165.375 li
218.568 178.875 li
clp
222.318 172.125 mo
228.318 175.125 li
228.318 169.125 li
cp
f
.75 lw
0 lj
[] 0 dsh
222.318 172.125 mo
228.318 175.125 li
228.318 169.125 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
47.3849 60.7365 mo
52.9157 58.4104 li
53.691 60.2539 li
48.1603 62.5801 li
47.3849 60.7365 li
55.2201 57.4411 mo
57.9855 56.278 li
58.7609 58.1216 li
55.9955 59.2846 li
55.2201 57.4411 li
60.2899 55.3088 mo
65.1321 53.2722 li
65.8035 52.9786 li
66.605 54.811 li
65.9279 55.1071 li
65.9149 55.1126 li
61.0653 57.1523 li
60.2899 55.3088 li
68.094 51.9768 mo
70.8427 50.7747 li
71.6441 52.6071 li
68.8955 53.8092 li
68.094 51.9768 li
73.1332 49.7729 mo
78.6304 47.3687 li
79.4318 49.2011 li
73.9346 51.6053 li
73.1332 49.7729 li
80.921 46.3669 mo
82.881 45.5097 li
82.9829 45.4716 li
83.8043 45.2145 li
84.4019 47.1231 li
83.6326 47.3639 li
81.7223 48.1994 li
80.921 46.3669 li
86.1901 44.4675 mo
91.916 42.6747 li
92.5136 44.5834 li
86.7877 46.3761 li
86.1901 44.4675 li
94.3018 41.9277 mo
97.1648 41.0313 li
97.7623 42.94 li
94.8994 43.8364 li
94.3018 41.9277 li
99.5506 40.2843 mo
100.737 39.9127 li
100.767 39.9039 li
105.348 38.6245 li
105.886 40.5508 li
101.32 41.8261 li
100.148 42.193 li
99.5506 40.2843 li
107.756 37.952 mo
110.646 37.145 li
111.183 39.0712 li
108.294 39.8783 li
107.756 37.952 li
113.053 36.4725 mo
118.522 34.9452 li
118.568 34.9334 li
118.883 34.8617 li
119.327 36.8116 li
119.037 36.8779 li
113.591 38.3987 li
113.053 36.4725 li
121.32 34.3058 mo
124.245 33.6387 li
124.69 35.5886 li
121.765 36.2557 li
121.32 34.3058 li
126.682 33.0829 mo
132.532 31.7487 li
132.977 33.6987 li
127.127 35.0328 li
126.682 33.0829 li
134.97 31.1928 mo
136.312 30.8868 li
137.863 30.4946 li
138.353 32.4337 li
136.79 32.8287 li
136.768 32.8341 li
135.414 33.1427 li
134.97 31.1928 li
140.287 29.882 mo
146.104 28.4117 li
146.594 30.3508 li
140.777 31.821 li
140.287 29.882 li
148.528 27.7991 mo
151.436 27.064 li
151.926 29.0029 li
149.018 29.7381 li
148.528 27.7991 li
153.86 26.4513 mo
154.046 26.4043 li
159.628 24.8743 li
160.157 26.8032 li
154.564 28.336 li
154.545 28.3411 li
154.35 28.3904 li
153.86 26.4513 li
162.039 24.2135 mo
164.933 23.4205 li
165.461 25.3494 li
162.568 26.1424 li
162.039 24.2135 li
167.344 22.7597 mo
171.79 21.5411 li
171.842 21.5283 li
173.2 21.2332 li
173.625 23.1876 li
172.293 23.477 li
167.872 24.6886 li
167.344 22.7597 li
175.643 20.7024 mo
178.575 20.0653 li
178.999 22.0197 li
176.068 22.6567 li
175.643 20.7024 li
181.018 19.5345 mo
186.881 18.2603 li
187.305 20.2147 li
181.442 21.4888 li
181.018 19.5345 li
189.324 17.7295 mo
189.567 17.6766 li
192.157 16.9477 li
192.699 18.8729 li
190.08 19.6099 li
190.021 19.6245 li
189.748 19.6838 li
189.324 17.7295 li
194.564 16.2705 mo
200.339 14.6451 li
200.881 16.5704 li
195.105 18.1957 li
194.564 16.2705 li
202.746 13.9679 mo
205.634 13.1553 li
206.175 15.0805 li
203.288 15.8932 li
202.746 13.9679 li
208.073 12.4918 mo
213.892 11.0283 li
214.379 12.968 li
208.561 14.4314 li
208.073 12.4918 li
216.316 10.4186 mo
219.225 9.68691 li
219.713 11.6265 li
216.804 12.3582 li
216.316 10.4186 li
221.65 9.07713 mo
225.074 8.2159 li
225.562 10.1555 li
222.138 11.0167 li
221.65 9.07713 li
.00546273 .194736 1 0 cmyk
f
gsave
41.477 69.6509 mo
54.0682 69.6509 li
54.0682 53.6656 li
41.477 53.6656 li
41.477 69.6509 li
clp
47.7726 65.9009 mo
50.3182 61.6583 li
47.7726 57.4157 li
45.227 61.6583 li
47.7726 65.9009 li
f
47.7726 65.9009 mo
47.4511 65.708 li
49.8809 61.6583 li
47.7726 58.1445 li
45.6643 61.6583 li
48.0942 65.708 li
47.7726 65.9009 li
47.4511 65.708 li
47.7726 65.9009 li
47.4511 66.0939 li
44.7897 61.6583 li
47.7726 56.6868 li
50.7555 61.6583 li
47.7726 66.6298 li
47.4511 66.0939 li
47.7726 65.9009 li
1 /0 /CSD get_res sepcs
0 sep
f
grestore
gsave
59.2316 62.1835 mo
71.8227 62.1835 li
71.8227 46.1982 li
59.2316 46.1982 li
59.2316 62.1835 li
clp
65.5272 58.4335 mo
68.0727 54.1909 li
65.5272 49.9482 li
62.9816 54.1909 li
65.5272 58.4335 li
f
65.5272 58.4335 mo
65.2056 58.2406 li
67.6354 54.1909 li
65.5272 50.6771 li
63.4189 54.1909 li
65.8487 58.2406 li
65.5272 58.4335 li
65.2056 58.2406 li
65.5272 58.4335 li
65.2056 58.6264 li
62.5442 54.1909 li
65.5272 49.2194 li
68.5101 54.1909 li
65.5272 59.1624 li
65.2056 58.6264 li
65.5272 58.4335 li
1 /0 /CSD get_res sepcs
0 sep
f
grestore
gsave
76.9861 54.4186 mo
89.5773 54.4186 li
89.5773 38.4333 li
76.9861 38.4333 li
76.9861 54.4186 li
clp
83.2817 50.6686 mo
85.8273 46.4259 li
83.2817 42.1833 li
80.7361 46.4259 li
83.2817 50.6686 li
f
83.2817 50.6686 mo
82.9601 50.4757 li
85.3899 46.4259 li
83.2817 42.9122 li
81.1735 46.4259 li
83.6033 50.4757 li
83.2817 50.6686 li
82.9601 50.4757 li
83.2817 50.6686 li
82.9601 50.8615 li
80.2988 46.4259 li
83.2817 41.4544 li
86.2646 46.4259 li
83.2817 51.3974 li
82.9601 50.8615 li
83.2817 50.6686 li
1 /0 /CSD get_res sepcs
0 sep
f
grestore
gsave
94.7406 48.8597 mo
107.332 48.8597 li
107.332 32.8744 li
94.7406 32.8744 li
94.7406 48.8597 li
clp
101.036 45.1097 mo
103.582 40.867 li
101.036 36.6245 li
98.4906 40.867 li
101.036 45.1097 li
f
101.036 45.1097 mo
100.715 44.9168 li
103.145 40.867 li
101.036 37.3533 li
98.928 40.867 li
101.358 44.9168 li
101.036 45.1097 li
100.715 44.9168 li
101.036 45.1097 li
100.715 45.3027 li
98.0533 40.867 li
101.036 35.8955 li
104.019 40.867 li
101.036 45.8386 li
100.715 45.3027 li
101.036 45.1097 li
1 /0 /CSD get_res sepcs
0 sep
f
grestore
gsave
112.495 43.9009 mo
125.086 43.9009 li
125.086 27.9157 li
112.495 27.9157 li
112.495 43.9009 li
clp
118.791 40.151 mo
121.336 35.9083 li
118.791 31.6656 li
116.245 35.9083 li
118.791 40.151 li
f
118.791 40.151 mo
118.469 39.958 li
120.899 35.9083 li
118.791 32.3945 li
116.683 35.9083 li
119.112 39.958 li
118.791 40.151 li
118.469 39.958 li
118.791 40.151 li
118.469 40.3439 li
115.808 35.9083 li
118.791 30.9368 li
121.774 35.9083 li
118.791 40.8798 li
118.469 40.3439 li
118.791 40.151 li
1 /0 /CSD get_res sepcs
0 sep
f
grestore
gsave
130.25 39.8518 mo
142.841 39.8518 li
142.841 23.8665 li
130.25 23.8665 li
130.25 39.8518 li
clp
136.545 36.1018 mo
139.091 31.8591 li
136.545 27.6165 li
134 31.8591 li
136.545 36.1018 li
f
136.545 36.1018 mo
136.224 35.9088 li
138.654 31.8591 li
136.545 28.3453 li
134.437 31.8591 li
136.867 35.9088 li
136.545 36.1018 li
136.224 35.9088 li
136.545 36.1018 li
136.224 36.2947 li
133.562 31.8591 li
136.545 26.8876 li
139.528 31.8591 li
136.545 36.8307 li
136.224 36.2947 li
136.545 36.1018 li
1 /0 /CSD get_res sepcs
0 sep
f
grestore
gsave
148.004 35.3642 mo
160.595 35.3642 li
160.595 19.3789 li
148.004 19.3789 li
148.004 35.3642 li
clp
154.3 31.6142 mo
156.845 27.3715 li
154.3 23.1289 li
151.754 27.3715 li
154.3 31.6142 li
f
154.3 31.6142 mo
153.978 31.4213 li
156.408 27.3715 li
154.3 23.8578 li
152.192 27.3715 li
154.621 31.4213 li
154.3 31.6142 li
153.978 31.4213 li
154.3 31.6142 li
153.978 31.8071 li
151.317 27.3715 li
154.3 22.4 li
157.283 27.3715 li
154.3 32.343 li
153.978 31.8071 li
154.3 31.6142 li
1 /0 /CSD get_res sepcs
0 sep
f
grestore
gsave
165.759 30.4982 mo
178.35 30.4982 li
178.35 14.5129 li
165.759 14.5129 li
165.759 30.4982 li
clp
172.054 26.7482 mo
174.6 22.5055 li
172.054 18.2629 li
169.509 22.5055 li
cp
f
.75 lw
0 lj
[] 0 dsh
172.054 26.7482 mo
174.6 22.5055 li
172.054 18.2629 li
169.509 22.5055 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
183.513 26.64 mo
196.105 26.64 li
196.105 10.6547 li
183.513 10.6547 li
183.513 26.64 li
clp
189.809 22.89 mo
192.355 18.6474 li
189.809 14.4047 li
187.263 18.6474 li
cp
f
.75 lw
0 lj
[] 0 dsh
189.809 22.89 mo
192.355 18.6474 li
189.809 14.4047 li
187.263 18.6474 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
201.268 21.6436 mo
213.859 21.6436 li
213.859 5.65838 li
201.268 5.65838 li
201.268 21.6436 li
clp
207.564 17.8936 mo
210.109 13.651 li
207.564 9.40836 li
205.018 13.651 li
cp
f
.75 lw
0 lj
[] 0 dsh
207.564 17.8936 mo
210.109 13.651 li
207.564 9.40836 li
205.018 13.651 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
gsave
219.023 17.1784 mo
231.614 17.1784 li
231.614 1.19307 li
219.023 1.19307 li
219.023 17.1784 li
clp
225.318 13.4284 mo
227.864 9.18573 li
225.318 4.94309 li
222.772 9.18573 li
cp
f
.75 lw
0 lj
[] 0 dsh
225.318 13.4284 mo
227.864 9.18573 li
225.318 4.94309 li
222.772 9.18573 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
grestore
[10 2 2 2 ] 0 dsh
47.7726 111.275 mo
65.5272 108.966 li
83.2817 106.379 li
101.036 104.29 li
118.791 102.149 li
136.545 100.949 li
154.3 98.3036 li
172.054 96.7825 li
189.809 95.1598 li
207.564 93.5625 li
225.318 92.032 li
.776974 .739834 0 0 cmyk
@
47.7726 108.275 mo
47.0991 110.348 li
44.9194 110.348 li
46.6828 111.629 li
46.0093 113.702 li
47.7726 112.421 li
49.536 113.702 li
48.8624 111.629 li
50.6258 110.348 li
48.4461 110.348 li
cp
f
.75 lw
2 lj
[] 0 dsh
47.7726 108.275 mo
47.0991 110.348 li
44.9194 110.348 li
46.6828 111.629 li
46.0093 113.702 li
47.7726 112.421 li
49.536 113.702 li
48.8624 111.629 li
50.6258 110.348 li
48.4461 110.348 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
65.5272 105.966 mo
64.8536 108.039 li
62.674 108.039 li
64.4373 109.32 li
63.7638 111.393 li
65.5272 110.112 li
67.2905 111.393 li
66.617 109.32 li
68.3803 108.039 li
66.2007 108.039 li
cp
.776974 .739834 0 0 cmyk
f
65.5272 105.966 mo
64.8536 108.039 li
62.674 108.039 li
64.4373 109.32 li
63.7638 111.393 li
65.5272 110.112 li
67.2905 111.393 li
66.617 109.32 li
68.3803 108.039 li
66.2007 108.039 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
83.2817 103.379 mo
82.6082 105.452 li
80.4285 105.452 li
82.1919 106.733 li
81.5183 108.806 li
83.2817 107.525 li
85.0451 108.806 li
84.3715 106.733 li
86.1349 105.452 li
83.9552 105.452 li
cp
.776974 .739834 0 0 cmyk
f
83.2817 103.379 mo
82.6082 105.452 li
80.4285 105.452 li
82.1919 106.733 li
81.5183 108.806 li
83.2817 107.525 li
85.0451 108.806 li
84.3715 106.733 li
86.1349 105.452 li
83.9552 105.452 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
101.036 101.29 mo
100.363 103.363 li
98.1831 103.363 li
99.9464 104.645 li
99.2729 106.718 li
101.036 105.436 li
102.8 106.718 li
102.126 104.645 li
103.889 103.363 li
101.71 103.363 li
cp
.776974 .739834 0 0 cmyk
f
101.036 101.29 mo
100.363 103.363 li
98.1831 103.363 li
99.9464 104.645 li
99.2729 106.718 li
101.036 105.436 li
102.8 106.718 li
102.126 104.645 li
103.889 103.363 li
101.71 103.363 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
118.791 99.1487 mo
118.117 101.222 li
115.938 101.222 li
117.701 102.503 li
117.027 104.576 li
118.791 103.295 li
120.554 104.576 li
119.881 102.503 li
121.644 101.222 li
119.464 101.222 li
cp
.776974 .739834 0 0 cmyk
f
118.791 99.1487 mo
118.117 101.222 li
115.938 101.222 li
117.701 102.503 li
117.027 104.576 li
118.791 103.295 li
120.554 104.576 li
119.881 102.503 li
121.644 101.222 li
119.464 101.222 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
136.545 97.9492 mo
135.872 100.022 li
133.692 100.022 li
135.456 101.303 li
134.782 103.376 li
136.545 102.095 li
138.309 103.376 li
137.635 101.303 li
139.399 100.022 li
137.219 100.022 li
cp
.776974 .739834 0 0 cmyk
f
136.545 97.9492 mo
135.872 100.022 li
133.692 100.022 li
135.456 101.303 li
134.782 103.376 li
136.545 102.095 li
138.309 103.376 li
137.635 101.303 li
139.399 100.022 li
137.219 100.022 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
154.3 95.3037 mo
153.626 97.3766 li
151.447 97.3766 li
153.21 98.6578 li
152.537 100.731 li
154.3 99.4495 li
156.063 100.731 li
155.39 98.6578 li
157.153 97.3766 li
154.973 97.3766 li
154.3 95.3037 li
.776974 .739834 0 0 cmyk
f
154.3 95.3037 mo
154.657 95.4195 li
153.983 97.4925 li
153.626 97.7516 li
152.601 97.7516 li
153.43 98.3544 li
153.567 98.7736 li
153.25 99.749 li
154.079 99.1462 li
154.52 99.1462 li
155.35 99.749 li
155.033 98.7736 li
155.169 98.3544 li
155.999 97.7516 li
154.973 97.7516 li
154.617 97.4925 li
153.943 95.4195 li
154.3 95.3037 li
154.657 95.4195 li
154.3 95.3037 li
154.657 95.1878 li
155.246 97.0016 li
157.153 97.0016 li
157.373 97.68 li
155.831 98.801 li
156.42 100.615 li
155.843 101.034 li
154.3 99.9131 li
152.757 101.034 li
152.18 100.615 li
152.769 98.801 li
151.226 97.68 li
151.447 97.0016 li
153.354 97.0016 li
153.943 95.1878 li
154.657 95.1878 li
154.3 95.3037 li
1 /0 /CSD get_res sepcs
0 sep
f
172.054 93.7825 mo
171.381 95.8554 li
169.201 95.8554 li
170.965 97.1366 li
170.291 99.2095 li
172.054 97.9284 li
173.818 99.2095 li
173.144 97.1366 li
174.908 95.8554 li
172.728 95.8554 li
cp
.776974 .739834 0 0 cmyk
f
172.054 93.7825 mo
171.381 95.8554 li
169.201 95.8554 li
170.965 97.1366 li
170.291 99.2095 li
172.054 97.9284 li
173.818 99.2095 li
173.144 97.1366 li
174.908 95.8554 li
172.728 95.8554 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
189.809 92.1598 mo
189.135 94.2328 li
186.956 94.2328 li
188.719 95.5139 li
188.046 97.5869 li
189.809 96.3057 li
191.572 97.5869 li
190.899 95.5139 li
192.662 94.2328 li
190.483 94.2328 li
cp
.776974 .739834 0 0 cmyk
f
189.809 92.1598 mo
189.135 94.2328 li
186.956 94.2328 li
188.719 95.5139 li
188.046 97.5869 li
189.809 96.3057 li
191.572 97.5869 li
190.899 95.5139 li
192.662 94.2328 li
190.483 94.2328 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
207.564 90.5625 mo
206.89 92.6355 li
204.71 92.6355 li
206.474 93.9166 li
205.8 95.9896 li
207.564 94.7084 li
209.327 95.9896 li
208.653 93.9166 li
210.417 92.6355 li
208.237 92.6355 li
cp
.776974 .739834 0 0 cmyk
f
207.564 90.5625 mo
206.89 92.6355 li
204.71 92.6355 li
206.474 93.9166 li
205.8 95.9896 li
207.564 94.7084 li
209.327 95.9896 li
208.653 93.9166 li
210.417 92.6355 li
208.237 92.6355 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
225.318 89.032 mo
224.645 91.105 li
222.465 91.105 li
224.228 92.3861 li
223.555 94.4591 li
225.318 93.1779 li
227.081 94.4591 li
226.408 92.3861 li
228.171 91.105 li
225.992 91.105 li
cp
.776974 .739834 0 0 cmyk
f
225.318 89.032 mo
224.645 91.105 li
222.465 91.105 li
224.228 92.3861 li
223.555 94.4591 li
225.318 93.1779 li
227.081 94.4591 li
226.408 92.3861 li
228.171 91.105 li
225.992 91.105 li
cp
1 /0 /CSD get_res sepcs
0 sep
@
.8 lw
2 lc
0 lj
38.8953 190.26 mo
38.8953 0 li
1 /0 /CSD get_res sepcs
.85 sep
@
234.195 190.26 mo
234.195 0 li
@
38.8953 190.26 mo
234.195 190.26 li
@
38.8953 0 mo
234.195 0 li
@
157.232 93.9535 mo
51.1476 93.9535 li
51.1476 93.4228 li
50.0861 93.9535 li
47.2953 93.9535 li
46.5721 93.9517 46.1247 93.7761 45.8489 93.5 cv
45.5727 93.2242 45.3971 92.7767 45.3953 92.0536 cv
45.3953 62.6676 li
47.4511 66.0939 li
47.7726 66.6298 li
50.7551 61.6589 li
63.7648 56.2251 li
65.2056 58.6264 li
65.5272 59.1624 li
68.5101 54.1909 li
68.4966 54.1684 li
81.4679 48.3744 li
82.9601 50.8615 li
83.2817 51.3974 li
86.1433 46.628 li
94.8985 43.8334 li
94.8994 43.8364 li
97.7623 42.94 li
97.7564 42.9212 li
99.04 42.5115 li
100.715 45.3027 li
101.036 45.8386 li
103.871 41.1135 li
104.892 40.8285 li
116.83 37.612 li
118.469 40.3439 li
118.791 40.8798 li
121.458 36.4353 li
129.376 34.5198 li
132.977 33.6987 li
132.966 33.6515 li
134.426 33.2983 li
136.224 36.2947 li
136.545 36.8307 li
139.4 32.0736 li
140.755 31.735 li
140.777 31.821 li
146.594 30.3508 li
146.576 30.2809 li
149.002 29.675 li
149.018 29.7381 li
151.926 29.0029 li
151.912 28.948 li
152.217 28.8718 li
153.978 31.8071 li
154.3 32.343 li
157.125 27.6341 li
159.132 27.0841 li
159.132 92.0536 li
159.13 92.7767 158.954 93.2242 158.678 93.5 cv
158.403 93.7761 157.955 93.9517 157.232 93.9535 cv
45.3953 60.6489 mo
45.3953 8.39998 li
45.3971 7.67679 45.5727 7.22939 45.8489 6.95354 cv
46.1247 6.6774 46.5721 6.50179 47.2953 6.5 cv
157.232 6.5 li
157.955 6.50179 158.403 6.6774 158.678 6.95354 cv
158.954 7.22939 159.13 7.67679 159.132 8.39998 cv
159.132 25.0103 li
156.327 25.779 li
154.3 22.4 li
151.455 27.1407 li
151.436 27.064 li
148.528 27.7991 li
148.55 27.8898 li
146.128 28.5079 li
146.104 28.4117 li
140.287 29.882 li
140.314 29.9914 li
138.661 30.4133 li
136.545 26.8876 li
133.746 31.5528 li
132.546 31.8079 li
132.532 31.7487 li
128.548 32.6575 li
120.81 34.3017 li
118.791 30.9368 li
116.049 35.5072 li
103.039 39.233 li
101.036 35.8955 li
98.1563 40.6954 li
85.2292 44.7003 li
83.2817 41.4544 li
80.2988 46.4259 li
80.3681 46.5414 li
67.3065 52.185 li
65.5272 49.2194 li
62.5442 54.1909 li
62.5529 54.2053 li
49.5582 59.6627 li
47.7726 56.6868 li
45.3953 60.6489 li
/1 
<<
/Name (Black)
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
0 sep
f
53.3673 59.4841 mo
53.247 59.1982 li
55.552 58.2301 li
55.6742 58.5206 li
53.3673 59.4841 li
58.4424 57.3644 mo
58.318 57.0685 li
60.6229 56.1005 li
60.7493 56.4009 li
58.4424 57.3644 li
67.9783 53.3047 mo
67.8256 53.0501 li
68.4462 52.7819 li
68.561 53.0444 li
67.9783 53.3047 li
71.3002 51.8208 mo
71.2001 51.592 li
73.4951 50.6004 li
73.5829 50.8012 li
71.3002 51.8208 li
79.0614 48.3541 mo
79.003 48.2205 li
80.8871 47.4064 li
80.9496 47.5106 li
79.0614 48.3541 li
85.8183 45.682 mo
85.7589 45.5831 li
86.4704 45.3627 li
86.502 45.4638 li
85.8183 45.682 li
92.218 43.6393 mo
92.2016 43.5871 li
94.5897 42.8472 li
94.5997 42.8791 li
92.218 43.6393 li
97.4577 41.9668 mo
97.4553 41.9594 li
98.326 41.6897 li
97.4577 41.9668 li
105.62 39.5967 mo
105.604 39.5387 li
108.007 38.8504 li
108.034 38.9463 li
105.62 39.5967 li
110.931 38.1658 mo
110.891 38.0244 li
113.295 37.3361 li
113.345 37.5154 li
110.931 38.1658 li
121.471 35.4033 mo
121.354 35.2085 li
121.518 35.1736 li
121.565 35.3804 li
121.471 35.4033 li
124.481 34.675 mo
124.453 34.5499 li
126.898 34.0302 li
126.911 34.0872 li
124.481 34.675 li
0 .00784314 .0392157 0 cmyk
f
50.7551 61.6589 mo
50.7555 61.6583 li
50.6742 61.5228 li
53.691 60.2539 li
53.3673 59.4841 li
55.6742 58.5206 li
55.9955 59.2846 li
58.7609 58.1216 li
58.4424 57.3644 li
60.7493 56.4009 li
61.0653 57.1523 li
63.665 56.0589 li
63.7648 56.2251 li
50.7551 61.6589 li
49.6347 59.7903 mo
49.5582 59.6627 li
62.5529 54.2053 li
62.6256 54.3264 li
60.2899 55.3088 li
60.6229 56.1005 li
58.318 57.0685 li
57.9855 56.278 li
55.2201 57.4411 li
55.552 58.2301 li
53.247 59.1982 li
52.9157 58.4104 li
49.6347 59.7903 li
68.4966 54.1684 mo
67.9783 53.3047 li
68.561 53.0444 li
68.8955 53.8092 li
71.6441 52.6071 li
71.3002 51.8208 li
73.5829 50.8012 li
73.9346 51.6053 li
79.4318 49.2011 li
79.0614 48.3541 li
80.9496 47.5106 li
81.4679 48.3744 li
68.4966 54.1684 li
67.8256 53.0501 mo
67.3065 52.185 li
80.3681 46.5414 li
80.8871 47.4064 li
79.003 48.2205 li
78.6304 47.3687 li
73.1332 49.7729 li
73.4951 50.6004 li
71.2001 51.592 li
70.8427 50.7747 li
68.094 51.9768 li
68.4462 52.7819 li
67.8256 53.0501 li
86.1433 46.628 mo
86.2646 46.4259 li
85.8183 45.682 li
86.502 45.4638 li
86.7877 46.3761 li
92.5136 44.5834 li
92.218 43.6393 li
94.5997 42.8791 li
94.8985 43.8334 li
86.1433 46.628 li
85.7589 45.5831 mo
85.2292 44.7003 li
98.1563 40.6954 li
98.0533 40.867 li
99.04 42.5115 li
97.7564 42.9212 li
97.4577 41.9668 li
98.326 41.6897 li
97.4553 41.9594 li
97.1648 41.0313 li
94.3018 41.9277 li
94.5897 42.8472 li
92.2016 43.5871 li
91.916 42.6747 li
86.1901 44.4675 li
86.4704 45.3627 li
85.7589 45.5831 li
104.892 40.8285 mo
105.886 40.5508 li
105.62 39.5967 li
108.034 38.9463 li
108.294 39.8783 li
111.183 39.0712 li
110.931 38.1658 li
113.345 37.5154 li
113.591 38.3987 li
116.77 37.5111 li
116.83 37.612 li
104.892 40.8285 li
105.604 39.5387 mo
105.348 38.6245 li
103.057 39.2643 li
103.039 39.233 li
116.049 35.5072 li
115.956 35.6618 li
113.053 36.4725 li
113.295 37.3361 li
110.891 38.0244 li
110.646 37.145 li
107.756 37.952 li
108.007 38.8504 li
105.604 39.5387 li
121.458 36.4353 mo
121.71 36.0148 li
121.765 36.2557 li
124.69 35.5886 li
124.481 34.675 li
126.911 34.0872 li
127.127 35.0328 li
129.376 34.5198 li
121.458 36.4353 li
121.631 35.6711 mo
121.471 35.4033 li
121.565 35.3804 li
121.631 35.6711 li
121.354 35.2085 mo
120.81 34.3017 li
128.548 32.6575 li
126.682 33.0829 li
126.898 34.0302 li
124.453 34.5499 li
124.245 33.6387 li
121.32 34.3058 li
121.518 35.1736 li
121.354 35.2085 li
132.966 33.6515 mo
132.546 31.8079 li
133.746 31.5528 li
133.562 31.8591 li
134.426 33.2983 li
132.966 33.6515 li
139.4 32.0736 mo
139.528 31.8591 li
138.661 30.4133 li
140.314 29.9914 li
140.755 31.735 li
139.4 32.0736 li
146.576 30.2809 mo
146.128 28.5079 li
148.55 27.8898 li
149.002 29.675 li
146.576 30.2809 li
151.912 28.948 mo
151.657 27.9385 li
152.217 28.8718 li
151.912 28.948 li
f
51.1476 93.9535 mo
50.0861 93.9535 li
51.1476 93.4228 li
51.1476 93.9535 li
1 /1 /CSD get_res sepcs
0 sep
f
50.6742 61.5228 mo
49.6347 59.7903 li
52.9157 58.4104 li
53.247 59.1982 li
53.3673 59.4841 li
53.691 60.2539 li
50.6742 61.5228 li
55.9955 59.2846 mo
55.6742 58.5206 li
55.552 58.2301 li
55.2201 57.4411 li
57.9855 56.278 li
58.318 57.0685 li
58.4424 57.3644 li
58.7609 58.1216 li
55.9955 59.2846 li
61.0653 57.1523 mo
60.7493 56.4009 li
60.6229 56.1005 li
60.2899 55.3088 li
62.6256 54.3264 li
63.665 56.0589 li
61.0653 57.1523 li
68.8955 53.8092 mo
68.561 53.0444 li
68.4462 52.7819 li
68.094 51.9768 li
70.8427 50.7747 li
71.2001 51.592 li
71.3002 51.8208 li
71.6441 52.6071 li
68.8955 53.8092 li
73.9346 51.6053 mo
73.5829 50.8012 li
73.4951 50.6004 li
73.1332 49.7729 li
78.6304 47.3687 li
79.003 48.2205 li
79.0614 48.3541 li
79.4318 49.2011 li
73.9346 51.6053 li
86.7877 46.3761 mo
86.502 45.4638 li
86.4704 45.3627 li
86.1901 44.4675 li
91.916 42.6747 li
92.2016 43.5871 li
92.218 43.6393 li
92.5136 44.5834 li
86.7877 46.3761 li
94.8994 43.8364 mo
94.8985 43.8334 li
94.5997 42.8791 li
94.5897 42.8472 li
94.3018 41.9277 li
97.1648 41.0313 li
97.4553 41.9594 li
97.4577 41.9668 li
97.7564 42.9212 li
97.7623 42.94 li
94.8994 43.8364 li
103.871 41.1135 mo
104.019 40.867 li
103.057 39.2643 li
105.348 38.6245 li
105.604 39.5387 li
105.62 39.5967 li
105.886 40.5508 li
104.892 40.8285 li
103.871 41.1135 li
108.294 39.8783 mo
108.034 38.9463 li
108.007 38.8504 li
107.756 37.952 li
110.646 37.145 li
110.891 38.0244 li
110.931 38.1658 li
111.183 39.0712 li
108.294 39.8783 li
113.591 38.3987 mo
113.345 37.5154 li
113.295 37.3361 li
113.053 36.4725 li
115.956 35.6618 li
115.808 35.9083 li
116.77 37.5111 li
113.591 38.3987 li
121.765 36.2557 mo
121.71 36.0148 li
121.774 35.9083 li
121.631 35.6711 li
121.565 35.3804 li
121.518 35.1736 li
121.32 34.3058 li
124.245 33.6387 li
124.453 34.5499 li
124.481 34.675 li
124.69 35.5886 li
121.765 36.2557 li
127.127 35.0328 mo
126.911 34.0872 li
126.898 34.0302 li
126.682 33.0829 li
128.548 32.6575 li
132.532 31.7487 li
132.546 31.8079 li
132.966 33.6515 li
132.977 33.6987 li
129.376 34.5198 li
127.127 35.0328 li
140.777 31.821 mo
140.755 31.735 li
140.314 29.9914 li
140.287 29.882 li
146.104 28.4117 li
146.128 28.5079 li
146.576 30.2809 li
146.594 30.3508 li
140.777 31.821 li
149.018 29.7381 mo
149.002 29.675 li
148.55 27.8898 li
148.528 27.7991 li
151.436 27.064 li
151.455 27.1407 li
151.317 27.3715 li
151.657 27.9385 li
151.912 28.948 li
151.926 29.0029 li
149.018 29.7381 li
157.125 27.6341 mo
157.283 27.3715 li
156.327 25.779 li
159.132 25.0103 li
159.132 27.0841 li
157.125 27.6341 li
0 .0392157 .2 0 cmyk
f
47.7726 65.172 mo
45.6643 61.6583 li
47.7726 58.1445 li
49.8809 61.6583 li
47.7726 65.172 li
f
47.7726 66.6298 mo
47.4511 66.0939 li
45.3953 62.6676 li
45.3953 60.6489 li
47.7726 56.6868 li
49.5582 59.6627 li
49.6347 59.7903 li
50.6742 61.5228 li
50.7555 61.6583 li
50.7551 61.6589 li
47.7726 66.6298 li
47.4511 65.708 mo
47.7726 65.9009 li
47.4511 65.708 li
47.7726 58.1445 mo
45.6643 61.6583 li
47.7726 65.172 li
49.8809 61.6583 li
47.7726 58.1445 li
1 /1 /CSD get_res sepcs
0 sep
f
65.5272 57.7046 mo
63.4189 54.1909 li
65.5272 50.6771 li
67.6354 54.1909 li
65.5272 57.7046 li
0 .0392157 .2 0 cmyk
f
65.5272 59.1624 mo
65.2056 58.6264 li
63.7648 56.2251 li
63.665 56.0589 li
62.6256 54.3264 li
62.5529 54.2053 li
62.5442 54.1909 li
65.5272 49.2194 li
67.3065 52.185 li
67.8256 53.0501 li
67.9783 53.3047 li
68.4966 54.1684 li
68.5101 54.1909 li
65.5272 59.1624 li
65.2056 58.2406 mo
65.5272 58.4335 li
65.2056 58.2406 li
65.5272 50.6771 mo
63.4189 54.1909 li
65.5272 57.7046 li
67.6354 54.1909 li
65.5272 50.6771 li
1 /1 /CSD get_res sepcs
0 sep
f
83.2817 49.9397 mo
81.1735 46.4259 li
83.2817 42.9122 li
85.3899 46.4259 li
83.2817 49.9397 li
0 .0392157 .2 0 cmyk
f
83.2817 51.3974 mo
82.9601 50.8615 li
81.4679 48.3744 li
80.9496 47.5106 li
80.8871 47.4064 li
80.3681 46.5414 li
80.2988 46.4259 li
83.2817 41.4544 li
85.2292 44.7003 li
85.7589 45.5831 li
85.8183 45.682 li
86.2646 46.4259 li
86.1433 46.628 li
83.2817 51.3974 li
82.9601 50.4757 mo
83.2817 50.6686 li
82.9601 50.4757 li
83.2817 42.9122 mo
81.1735 46.4259 li
83.2817 49.9397 li
85.3899 46.4259 li
83.2817 42.9122 li
1 /1 /CSD get_res sepcs
0 sep
f
101.036 44.3809 mo
98.928 40.867 li
101.036 37.3533 li
103.145 40.867 li
101.036 44.3809 li
0 .0392157 .2 0 cmyk
f
101.036 45.8386 mo
100.715 45.3027 li
99.04 42.5115 li
98.0533 40.867 li
98.1563 40.6954 li
101.036 35.8955 li
103.039 39.233 li
103.057 39.2643 li
104.019 40.867 li
103.871 41.1135 li
101.036 45.8386 li
100.715 44.9168 mo
101.036 45.1097 li
100.715 44.9168 li
101.036 37.3533 mo
98.928 40.867 li
101.036 44.3809 li
103.145 40.867 li
101.036 37.3533 li
1 /1 /CSD get_res sepcs
0 sep
f
118.791 39.4221 mo
116.683 35.9083 li
118.791 32.3945 li
120.899 35.9083 li
118.791 39.4221 li
0 .0392157 .2 0 cmyk
f
118.791 40.8798 mo
118.469 40.3439 li
116.83 37.612 li
116.77 37.5111 li
115.808 35.9083 li
115.956 35.6618 li
116.049 35.5072 li
118.791 30.9368 li
120.81 34.3017 li
121.354 35.2085 li
121.471 35.4033 li
121.631 35.6711 li
121.774 35.9083 li
121.71 36.0148 li
121.458 36.4353 li
118.791 40.8798 li
118.469 39.958 mo
118.791 40.151 li
118.469 39.958 li
118.791 32.3945 mo
116.683 35.9083 li
118.791 39.4221 li
120.899 35.9083 li
118.791 32.3945 li
1 /1 /CSD get_res sepcs
0 sep
f
136.545 35.3729 mo
134.437 31.8591 li
136.545 28.3453 li
138.654 31.8591 li
136.545 35.3729 li
0 .0392157 .2 0 cmyk
f
136.545 36.8307 mo
136.224 36.2947 li
134.426 33.2983 li
133.562 31.8591 li
133.746 31.5528 li
136.545 26.8876 li
138.661 30.4133 li
139.528 31.8591 li
139.4 32.0736 li
136.545 36.8307 li
136.224 35.9088 mo
136.545 36.1018 li
136.224 35.9088 li
136.545 28.3453 mo
134.437 31.8591 li
136.545 35.3729 li
138.654 31.8591 li
136.545 28.3453 li
1 /1 /CSD get_res sepcs
0 sep
f
154.3 30.8853 mo
152.192 27.3715 li
154.3 23.8578 li
156.408 27.3715 li
154.3 30.8853 li
0 .0392157 .2 0 cmyk
f
154.3 32.343 mo
153.978 31.8071 li
152.217 28.8718 li
151.657 27.9385 li
151.317 27.3715 li
151.455 27.1407 li
154.3 22.4 li
156.327 25.779 li
157.283 27.3715 li
157.125 27.6341 li
154.3 32.343 li
153.978 31.4213 mo
154.3 31.6142 li
153.978 31.4213 li
154.3 23.8578 mo
152.192 27.3715 li
154.3 30.8853 li
156.408 27.3715 li
154.3 23.8578 li
1 /1 /CSD get_res sepcs
0 sep
f
157.243 94.9535 mo
157.239 94.9535 157.235 94.9535 157.232 94.9535 cv
51.1476 94.9535 li
51.1476 93.9535 li
157.232 93.9535 li
157.955 93.9517 158.403 93.7761 158.678 93.5 cv
158.954 93.2242 159.13 92.7767 159.132 92.0536 cv
159.132 27.0841 li
160.132 26.81 li
160.132 92.0536 li
160.134 92.9304 159.909 93.6829 159.385 94.2071 cv
158.863 94.7288 158.115 94.9535 157.243 94.9535 cv
47.2846 94.9535 mo
46.4123 94.9536 45.6639 94.7288 45.1418 94.2071 cv
44.6179 93.6829 44.3935 92.9304 44.3953 92.0536 cv
44.3953 8.39998 li
44.3935 7.52318 44.6179 6.77066 45.1418 6.24645 cv
45.6639 5.72468 46.4126 5.5 47.2849 5.5 cv
47.2884 5.5 47.2918 5.5 47.2953 5.50001 cv
157.232 5.50001 li
157.235 5.5 157.239 5.5 157.242 5.5 cv
158.115 5.5 158.863 5.72465 159.385 6.24645 cv
159.909 6.77066 160.134 7.52318 160.132 8.39998 cv
160.132 24.8414 li
159.655 24.9707 li
159.628 24.8743 li
159.132 25.0103 li
159.132 8.39998 li
159.13 7.67679 158.954 7.22939 158.678 6.95354 cv
158.403 6.6774 157.955 6.50179 157.232 6.5 cv
47.2953 6.5 li
46.5721 6.50179 46.1247 6.6774 45.8489 6.95354 cv
45.5727 7.22939 45.3971 7.67679 45.3953 8.39998 cv
45.3953 60.6489 li
44.7897 61.6583 li
45.3953 62.6676 li
45.3953 92.0536 li
45.3971 92.7767 45.5727 93.2242 45.8489 93.5 cv
46.1247 93.7761 46.5721 93.9517 47.2953 93.9535 cv
47.2953 93.9535 li
50.0861 93.9535 li
48.0861 94.9535 li
47.2953 94.9535 li
47.2918 94.9535 47.2881 94.9535 47.2846 94.9535 cv
1 /1 /CSD get_res sepcs
.160784 sep
f
160.132 26.712 mo
159.655 24.9707 li
160.132 24.8414 li
160.132 26.712 li
0 .00784314 .0392157 .160784 cmyk
f
50.3976 94.9535 mo
49.7633 94.9535 li
50.3976 94.6364 li
50.3976 94.9535 li
.129412 0 .176471 .160784 cmyk
f
51.1476 94.9535 mo
50.3976 94.9535 li
50.3976 94.6364 li
49.7633 94.9535 li
48.0861 94.9535 li
50.0861 93.9535 li
51.1476 93.9535 li
51.1476 94.9535 li
1 /1 /CSD get_res sepcs
.160784 sep
f
159.132 27.0841 mo
159.132 25.0103 li
159.628 24.8743 li
159.655 24.9707 li
160.132 26.712 li
160.132 26.81 li
159.132 27.0841 li
0 .0392157 .2 .160784 cmyk
f
45.3953 62.6676 mo
44.7897 61.6583 li
45.3953 60.6489 li
45.3953 62.6676 li
1 /1 /CSD get_res sepcs
.160784 sep
f
2 lw
1 lc
1 lj
49.6953 15.5664 mo
61.6953 15.5664 li
73.6953 15.5664 li
0 .942168 .982147 0 cmyk
@
61.6953 18.5664 mo
62.4909 18.5664 63.2541 18.2503 63.8167 17.6877 cv
64.3792 17.1251 64.6953 16.362 64.6953 15.5664 cv
64.6953 14.7708 64.3792 14.0076 63.8167 13.4451 cv
63.2541 12.8825 62.4909 12.5664 61.6953 12.5664 cv
60.8997 12.5664 60.1366 12.8825 59.574 13.4451 cv
59.0114 14.0076 58.6953 14.7708 58.6953 15.5664 cv
58.6953 16.362 59.0114 17.1251 59.574 17.6877 cv
60.1366 18.2503 60.8997 18.5664 61.6953 18.5664 cv
cp
f
1 lw
0 lc
61.6953 18.5664 mo
62.4909 18.5664 63.2541 18.2503 63.8167 17.6877 cv
64.3792 17.1251 64.6953 16.362 64.6953 15.5664 cv
64.6953 14.7708 64.3792 14.0076 63.8167 13.4451 cv
63.2541 12.8825 62.4909 12.5664 61.6953 12.5664 cv
60.8997 12.5664 60.1366 12.8825 59.574 13.4451 cv
59.0114 14.0076 58.6953 14.7708 58.6953 15.5664 cv
58.6953 16.362 59.0114 17.1251 59.574 17.6877 cv
60.1366 18.2503 60.8997 18.5664 61.6953 18.5664 cv
cp
@
1 /0 /CSD get_res sepcs
.85 sep
%ADOBeginSubsetFont: XAAAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSRIVAI+CMR12 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/N <1C60D8A8C9B613326598F76BFA5EBCD323BAB5855AE2D6B7820227C94EBDA0D53670D7BFBBF4AD7FF411C5546797302C1D6EA966D926476317690CF25ECA70D239C03F61249F96A5790509601110A6CCAADAB37EBE6C0930ACB30113CB1514B344A6F5AE0E03814C15B82BE4215D85019D8593B8C83F7B4BC7C0D922478B78440E3376961613BA61DAA3B42F74546F57553EBC8C10B73BFAE0D3CAA8B8DA81650EFB065AB05B7EDBC12B4B7836CCE2D32C717AA515F4E05FADCA7A6F622F0A93> |-systemdict /gcheck known {setglobal} if end {end} ifendSRIVAI+CMR12 /Encoding getdup 78 /N putpop%ADOEndSubsetFont
/SRIVAI+CMR12*1 [40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 2{/.notdef}rp /five /.notdef /seven 9{/.notdef}rp /A 3{/.notdef}rp /E 5{/.notdef}rp /K 2{/.notdef}rp /N /.notdef /P /.notdef /R /S /T 12{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /.notdef /u 4{/.notdef}rp /z 133{/.notdef}rp]SRIVAI+CMR12 nfSRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf83.2953 19.7664 mo(Nelson)sh121.365 19.7664 mo(\(ours\))sh2 lw
[8 3 ] 0 dsh
49.6953 32.9552 mo
61.6953 32.9552 li
73.6953 32.9552 li
.809354 .544823 0 0 cmyk
@
61.6953 29.9552 mo
58.6953 35.9552 li
64.6953 35.9552 li
cp
f
1 lw
0 lj
[] 0 dsh
61.6953 29.9552 mo
58.6953 35.9552 li
64.6953 35.9552 li
cp
@
1 /0 /CSD get_res sepcs
.85 sep
%ADOBeginSubsetFont: XAAAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSRIVAI+CMR12 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B63675661CD72152C956C1BF3F712A4AA84AA15AC0793ED42D2409B18F59974E7734DDC9A69FBDECA41B7C6AC6E25D3317705D8359144B2DF51FC6B2386EE786064B2F0180A06B116949BF6F24FE248F032F8557F9CDA5633627A94CCD6C68FA72FA56490EDAED1C95DE25D9CFB9CD31CEEF7368585B9D5FCC53E03E7A> |-/G <1C60D8A8C9B6F57665638726699F50A7578A54CEA9006C25AD570C65B411C72DC94423125D648F92EA391D7E6CB19C13370673E23571EF00B0DE03F34FBF493CA0FB8EF3B0B284254A8F6DD169F87B9B8589035F2556396C31EB3C9CDE1143FE2D20C5E41E64C1239B4813F0A161E029F6B7142D83C12CE556FC04B4D9B36D1A58E070204A489570B9270A5D9898B68E364940BA2B790E6C62ADBE92355E111B9AF6CD9299373BCCEDB15D5563224757497BB610921AD3847B820793AEB03A6DE454> |-/M <1C60D8A8C9B587231BD32234B47CD93235012A3BC068156B00A427D15147D2FC8687F1C722E8AF7AC72352344B0D2F3D705331D743CEF59C9589B1F1834C3EE8695FCBF0B85371F3D9E8190A24C0B65C17398947726A3B3F278E22E78417C9E1CD5FD816C01FEAF0C445A0496A51D320B44FC54AA0581C256AA34DB4DEB9BE0358796FAF238FAAAE407073A35D34018AAFFB327A94ED4E80FB2A40E4DD506CB1EBF7A05DD0796298B3B3A07104FCFEF148517B1A71A0DDB1D0223A5D087BC6DAA49BDB007CB6C7A8A3A3B9E4FE04DEFB73CE63157CB310DC1A7DB9D1205058> |-systemdict /gcheck known {setglobal} if end {end} ifendSRIVAI+CMR12 /Encoding getdup 67 /C putdup 71 /G putdup 77 /M putpop%ADOEndSubsetFont
/SRIVAI+CMR12*1 [40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 2{/.notdef}rp /five /.notdef /seven 9{/.notdef}rp /A /.notdef /C /.notdef /E /.notdef /G 3{/.notdef}rp /K /.notdef /M /N /.notdef /P /.notdef /R /S /T 12{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /.notdef /u 4{/.notdef}rp /z 133{/.notdef}rp]SRIVAI+CMR12 nfSRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf83.2953 37.1552 mo(CMSGen)sh2 lw
1 lj
[2 2 ] 0 dsh
49.6953 49.6798 mo
61.6953 49.6798 li
73.6953 49.6798 li
.643641 0 .876829 0 cmyk
@
58.6953 49.6798 mo
64.6953 52.6798 li
64.6953 46.6798 li
cp
f
1 lw
0 lj
[] 0 dsh
58.6953 49.6798 mo
64.6953 52.6798 li
64.6953 46.6798 li
cp
@
1 /0 /CSD get_res sepcs
.85 sep
%ADOBeginSubsetFont: XAAAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSRIVAI+CMR12 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Q <1C60D8A8C9B6EC34960BE9940CFD80679AD2C223AFFB07B7DD5B061183122AB43BAAF79A7F055D55DF0531A2BB48C655759CB28D81A28B6B05A873A796C1A541C07EB623F5BA120AE056B464DBF7F106C23F9D93210FBE25CF0C1AA7057E5BE7B6747082EB079E82F475F81B5636800B7860E8611B52714D5847408743D57359474670E970195728C5187BB63BB184CCE29F8AD113B407F2B796D1DE1010D8CDA2C2A630819E5C7A037ED878BD85FD18D80A96B87065F3563A76933F2B10BD4043FE8EC57605F52A79E718F81B3883> |-/k <1C60D8A8C9B7B71A30F4AAE592D95FFEBD9656B7569E4BE8065B9AFC730923A9905CB2D34EB2B68358CFAF19484A87F6BC10294C86F6A89E328035AD30643DFA4B6A99EFA1FBCF64CAA1B436BD6D9AFDB2F27062AA2CB56C5B1BE932FFADDA8763392FBD91992445C47311B776BC2081F88B3C734F4B23F1B4EF6A7CDBCC885E3B4066AE2620591C23699E97226A2A6295CF7AF4F672D6972D22F99A37ED50C7FD9337393CAEC3A49C85F8F9A25B1B7629D2D7FC5482EC37B3C0D2155A58E81315F2D3F5F82E378CA0CF78B263B86DBA2D46D2CF5BFAA3310EF76E8069350A67CB2F7C3188D56DA2F127A84DDCEBDA39EF08BE960D478A17C3> |-systemdict /gcheck known {setglobal} if end {end} ifendSRIVAI+CMR12 /Encoding getdup 81 /Q putdup 107 /k putpop%ADOEndSubsetFont
/SRIVAI+CMR12*1 [40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 2{/.notdef}rp /five /.notdef /seven 9{/.notdef}rp /A /.notdef /C /.notdef /E /.notdef /G 3{/.notdef}rp /K /.notdef /M /N /.notdef /P /Q /R /S /T 12{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /.notdef /k /l /m /n /o /p /.notdef /r /s /.notdef /u 4{/.notdef}rp /z 133{/.notdef}rp]SRIVAI+CMR12 nfSRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf83.2953 53.8798 mo(Quic)sh107 53.8798 mo(kSampler)sh2 lw
1 lj
[6 2.5 3 2.5 ] 0 dsh
49.6953 66.4044 mo
61.6953 66.4044 li
73.6953 66.4044 li
.00546273 .194736 1 0 cmyk
@
61.6953 70.647 mo
64.2409 66.4044 li
61.6953 62.1617 li
59.1497 66.4044 li
cp
f
1 lw
0 lj
[] 0 dsh
61.6953 70.647 mo
64.2409 66.4044 li
61.6953 62.1617 li
59.1497 66.4044 li
cp
@
1 /0 /CSD get_res sepcs
.85 sep
%ADOBeginSubsetFont: XAAAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.systemdict beginSRIVAI+CMR12 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/U <1C60D8A8C9B6133298E76DF3732B437BA6BF5A2C543DEFB653DBC9D7B54C42C76297395BC2304A2D65BE177337C15A5DE05118311ACE15CBDAD046149DDF8E08B7A69693C1907EA46E4F645C656F2F3716A45B85BC2C114AB9CADDCB8F58E4CEB91869760683A4665BC51F38FC2C3569AE84A91A6BD804D591087AD1899D950381C86928BFD5244D0C0204859BCCB01E4CC32AD012C605FB67B0AE3D71A56C27EF332342752F400ED0CD2B2E90CA2A6369A5> |-systemdict /gcheck known {setglobal} if end {end} ifendSRIVAI+CMR12 /Encoding getdup 85 /U putpop%ADOEndSubsetFont
/SRIVAI+CMR12*1 [40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 2{/.notdef}rp /five /.notdef /seven 9{/.notdef}rp /A /.notdef /C /.notdef /E /.notdef /G 3{/.notdef}rp /K /.notdef /M /N /.notdef /P /Q /R /S /T /U 11{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /.notdef /k /l /m /n /o /p /.notdef /r /s /.notdef /u 4{/.notdef}rp /z 133{/.notdef}rp]SRIVAI+CMR12 nfSRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf83.2953 70.6044 mo(UniGen)sh2 lw
1 lj
[10 2 2 2 ] 0 dsh
49.6953 83.129 mo
61.6953 83.129 li
73.6953 83.129 li
.776974 .739834 0 0 cmyk
@
61.6953 80.129 mo
61.0218 82.2019 li
58.8422 82.2019 li
60.6055 83.4831 li
59.932 85.556 li
61.6953 84.2749 li
63.4587 85.556 li
62.7851 83.4831 li
64.5485 82.2019 li
62.3689 82.2019 li
cp
f
1 lw
2 lj
[] 0 dsh
61.6953 80.129 mo
61.0218 82.2019 li
58.8422 82.2019 li
60.6055 83.4831 li
59.932 85.556 li
61.6953 84.2749 li
63.4587 85.556 li
62.7851 83.4831 li
64.5485 82.2019 li
62.3689 82.2019 li
cp
@
1 /0 /CSD get_res sepcs
.85 sep
SRIVAI+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf83.2953 87.329 mo(KUS)shgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
/SRIVAI+CMR12*1 uf/SRIVAI+CMR12 uf/XAAAAA+CMR12 uf/SRIVAJ+CMMI12*1 uf/SRIVAJ+CMMI12 uf/TAAAAA+CMMI12 uf/SRIVAK+CMR8*1 uf/SRIVAK+CMR8 uf/BBAAAA+CMR8 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
